###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:26:58
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_LCD\lcd_char2x8.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_LCD\lcd_char2x8.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"lcd_char2x8.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_LCD\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\lcd_char2x8.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\lcd_char2x8.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_LCD\lcd_char2x8.c
      1          
      2          #include "lcd_char2x8.h"
      3          #include "FEAT_Scheduler/sch_basic_pub.h"
      4          
      5          /****************************************************************************
      6          **	Includes (PRIVATE)
      7          ****************************************************************************/
      8          
      9          /****************************************************************************
     10          **	Includes (PUBLIC)
     11          ****************************************************************************/
     12          
     13          /****************************************************************************
     14          **	Constants, definies and typedefs  (PRIVATE)
     15          ****************************************************************************/
     16          
     17          /****************************************************************************
     18          **	Constants, definies and typedefs  (PUBLIC)
     19          ****************************************************************************/
     20          
     21          /****************************************************************************
     22          **	Variables definition (PRIVATE)
     23          ****************************************************************************/
     24          
     25          /****************************************************************************
     26          **	Variables definition (PUBLIC)
     27          ****************************************************************************/
     28          
     29          /****************************************************************************
     30          **	Functions declarations / prototypes (PRIVATE)
     31          ****************************************************************************/
     32          
     33          /****************************************************************************
     34          **	Functions declarations / prototypes (PUBLIC)
     35          ****************************************************************************/
     36          
     37          /****************************************************************************
     38          **	Functions implementation (PRIVATE)
     39          ****************************************************************************/
     40          
     41          /**
     42          * lcd28_func_name( params ) - description of function in module (lcd28)
     43          *	RETURN: 1 (SPI_R_OK) - if request has been fulfilled (SPI is freed by app)
     44          *			0 (SPI_R_FAIL) - if unsucceflul (e.g. used by another app or free)
     45          */

   \                                 In section .text, align 2, keep-with-next
     46          void lcd28_clear(uint8_t count)
     47          {
     48          }
   \                     lcd28_clear: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     49          
     50          
     51          /****************************************************************************
     52          **	Functions implementation (PUBLIC)
     53          ****************************************************************************/
     54          
     55          /**
     56            * lcd28_power_up() - sets up lcd28 module
     57            */

   \                                 In section .text, align 2, keep-with-next
     58          void lcd28_power_up ( void )
     59          {
     60          	// Internal variables initializtion (nothing from outside is assumed)
     61          }
   \                     lcd28_power_up: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     62          
     63          /**
     64            * lcd28_init() - sets up lcd28 module
     65            */

   \                                 In section .text, align 2, keep-with-next
     66          void lcd28_init ( void )
     67          {
   \                     lcd28_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
     68          	// External initialization (e.g. setup timers, connect to other components)
     69          		GPIO_InitTypeDef  GPIO_InitStructure;
     70          	/* Configure the GPIO_LED pin */
     71          //	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
     72          //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT_PP;
     73          //	GPIO_Init(GPIOC, &GPIO_InitStructure);
     74          //	GPIOC->BSR = GPIO_Pin_2; // Set pin (1)
     75          //	GPIOC->BRR = GPIO_Pin_2; // Reset pin (0)
     76            
     77            
     78          	//GPIO_InitTypeDef  GPIO_InitStructure; 
     79          	/* sEE_I2C Peripheral Disable */
     80          	//I2C_Cmd(SC2_I2C, DISABLE);
     81           	/* _I2C DeInit */
     82          	//I2C_DeInit(SC2_I2C);
     83          	
     84          	
     85          	/*!< GPIO configuration */  
     86           	/*!< Configure _I2C pins: SCL */
     87          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x9001             STR      R0,[SP, #+4]
     88          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
   \   00000008   0x200D             MOVS     R0,#+13
   \   0000000A   0xF88D 0x0008      STRB     R0,[SP, #+8]
     89          	GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000000E   0xA901             ADD      R1,SP,#+4
   \   00000010   0x....             LDR.N    R4,??DataTable1  ;; 0x4000b000
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       GPIO_Init
     90          	/* Set pull-up on sEE_I2C SCL pin */
     91          	GPIO_SetBits(GPIOA, GPIO_Pin_2);
   \   00000018   0x2104             MOVS     R1,#+4
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       GPIO_SetBits
     92          
     93          	/*!< Configure _I2C pins: SDA */
     94          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x9001             STR      R0,[SP, #+4]
     95          	GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000024   0xA901             ADD      R1,SP,#+4
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       GPIO_Init
     96          	/* Set pull-up on sEE_I2C SDA pin */
     97          	GPIO_SetBits(GPIOA, GPIO_Pin_1);
   \   0000002C   0x2102             MOVS     R1,#+2
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       GPIO_SetBits
     98           
     99          	TIM2->CCER &= 0xFFFFEEEE; 
   \   00000034   0x....             LDR.N    R0,??DataTable1_1  ;; 0x4000f020
   \   00000036   0x....             LDR.N    R2,??DataTable1_2  ;; 0xffffeeee
   \   00000038   0x6801             LDR      R1,[R0, #+0]
   \   0000003A   0x4011             ANDS     R1,R2,R1
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    100            
    101          	//SC_I2C_TypeDef* SCx_I2C;
    102          	I2C_InitTypeDef I2C_InitStruct;	// Create structure for SC2_I2C)
    103          	//uint8_t Address = LCD_I2C_ADDR;//0x3e; // LCD Address default?? //0x112;
    104          	//uint8_t Data = 0xAA;
    105          	uint8_t contrast = 35;
    106          	
    107          	I2C_StructInit(&I2C_InitStruct); // Initialize SC2_I2C structure with defaults
   \   0000003E   0xA800             ADD      R0,SP,#+0
   \   00000040   0x.... 0x....      BL       I2C_StructInit
    108          	I2C_InitStruct.I2C_ClockRate = 100000; // 100kHz
   \   00000044   0x....             LDR.N    R0,??DataTable1_3  ;; 0x186a0
    109          	I2C_Init(SC2_I2C, &I2C_InitStruct); // Initialize SC2 to work as I2C
   \   00000046   0x....             LDR.N    R4,??DataTable1_4  ;; 0x4000c03c
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0xA900             ADD      R1,SP,#+0
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       I2C_Init
    110          	I2C_Cmd(SC2_I2C, ENABLE); // ENABLE or DISABLE SC2_I2C peripheral
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       I2C_Cmd
    111          	
    112          	I2C_AcknowledgeConfig(SC2_I2C, ENABLE); /// Enable ACK mode
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x.... 0x....      BL       I2C_AcknowledgeConfig
    113          //	I2C_AcknowledgeConfig(SC2_I2C, DISABLE); /// Enable ACK mode
    114          
    115          	
    116          	halCommonDelayMilliseconds(10);
   \   00000062   0x200A             MOVS     R0,#+10
   \   00000064   0x.... 0x....      BL       halCommonDelayMilliseconds
    117          
    118          	lcd_cmd ( 0x38 );// 0b0011 1000 ) ; // function set
                 	^
Warning[Pe223]: function "lcd_cmd" declared implicitly
   \   00000068   0x2038             MOVS     R0,#+56
   \   0000006A   0x.... 0x....      BL       lcd_cmd
    119          	lcd_cmd ( 0x39 );// 0b0011 1001 ) ; // function set
   \   0000006E   0x2039             MOVS     R0,#+57
   \   00000070   0x.... 0x....      BL       lcd_cmd
    120          	lcd_cmd ( 0x04 );// 0b0000 0100 ) ; // EntryModeSet
   \   00000074   0x2004             MOVS     R0,#+4
   \   00000076   0x.... 0x....      BL       lcd_cmd
    121          	lcd_cmd ( 0x14 );// 0b0001 0100 ) ; // interval osc
   \   0000007A   0x2014             MOVS     R0,#+20
   \   0000007C   0x.... 0x....      BL       lcd_cmd
    122          	lcd_cmd ( 0x70 | ( contrast & 0xF ) );// 0b0111 0000 | ( contrast & 0xF ) ) ; // contrast Low
   \   00000080   0x2073             MOVS     R0,#+115
   \   00000082   0x.... 0x....      BL       lcd_cmd
    123          	lcd_cmd ( 0x5C | ( ( contrast >> 4 ) & 0x3 ) );// 0b0101 1100 | ( ( contrast >> 4 ) & 0x3 ) ) ; // contast High/icon/power
   \   00000086   0x205E             MOVS     R0,#+94
   \   00000088   0x.... 0x....      BL       lcd_cmd
    124          	lcd_cmd ( 0x6C );// 0b0110 1100 ) ; // follower control
   \   0000008C   0x206C             MOVS     R0,#+108
   \   0000008E   0x.... 0x....      BL       lcd_cmd
    125          	//delay ( 200 ) ;
    126          	halCommonDelayMilliseconds(100);
   \   00000092   0x2064             MOVS     R0,#+100
   \   00000094   0x.... 0x....      BL       halCommonDelayMilliseconds
    127          	lcd_cmd ( 0x38 );// 0b0011 1000 ) ; // function set
   \   00000098   0x2038             MOVS     R0,#+56
   \   0000009A   0x.... 0x....      BL       lcd_cmd
    128          	lcd_cmd ( 0x0C );// 0b0000 1100 ) ; // Display On
   \   0000009E   0x200C             MOVS     R0,#+12
   \   000000A0   0x.... 0x....      BL       lcd_cmd
    129          	lcd_cmd ( 0x01 );// 0b0000 0001 ) ; // Clear Display
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x.... 0x....      BL       lcd_cmd
    130          	//delay ( 2 ) ; 
    131          	halCommonDelayMilliseconds(2);	
   \   000000AA   0x2002             MOVS     R0,#+2
   \   000000AC   0x.... 0x....      BL       halCommonDelayMilliseconds
    132          
    133          	// Tryout displau
    134          	lcd_setCursor ( 0 , 0 ) ;
                 	^
Warning[Pe223]: function "lcd_setCursor" declared implicitly
   \   000000B0   0x2100             MOVS     R1,#+0
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x.... 0x....      BL       lcd_setCursor
    135          	lcd_printStr ( "SWITCH" ) ; 
                 	^
Warning[Pe223]: function "lcd_printStr" declared implicitly
   \   000000B8   0x.... 0x....      ADR.W    R0,?_0
   \   000000BC   0x.... 0x....      BL       lcd_printStr
    136          	
    137          //	I2C_GenerateSTART(SC2_I2C);
    138          //	I2C_Send7bitAddress(SC2_I2C, Address, I2C_Direction_Transmitter); // I2C_Direction_Transmitter or I2C_Direction_Receiver
    139          //	I2C_SendData(SC2_I2C, Data);
    140          //	Data=I2C_ReceiveData(SC2_I2C);
    141          	
    142          	
    143          	
    144          	/**
    145            * @brief  Checks whether the specified I2C flag is set or not.
    146            * @param  SCx_I2C: where x can be 1 or 2 to select the Serial controller peripheral.
    147            * @param  I2C_FLAG: specifies the SCx_I2C flag to check.
    148            *   This parameter can be one of the following values:
    149            *     @arg I2C_FLAG_NACK: Not acknowledge flag
    150            *     @arg I2C_FLAG_BTF: Byte transfer finished flag
    151            *     @arg I2C_FLAG_BRF: Byte receive finished flag
    152            *     @arg I2C_FLAG_CMDFIN: Command finished flag
    153            * @retval The new state of I2C_FLAG (SET or RESET).
    154            */
    155          //FlagStatus I2C_GetFlagStatus(SC_I2C_TypeDef* SCx_I2C, uint32_t I2C_FLAG);
    156          
    157          //	I2C_GenerateSTOP(SC2_I2C);
    158          	
    159          	
    160          	sch_add_loop(lcd28_loop);
   \   000000C0   0x.... 0x....      ADR.W    R0,lcd28_loop
   \   000000C4   0x.... 0x....      BL       sch_add_loop
    161          }
   \   000000C8   0xBD1F             POP      {R0-R4,PC}       ;; return
    162          
    163          /**
    164            * lcd28_loop() - sets up lcd28 module
    165            */

   \                                 In section .text, align 4, keep-with-next
    166          void lcd28_loop ( void )
    167          {
    168          }
   \                     lcd28_loop: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x4000B000         DC32     0x4000b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x4000F020         DC32     0x4000f020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xFFFFEEEE         DC32     0xffffeeee

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x4000C03C         DC32     0x4000c03c

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x53 0x57          DC8 "SWITCH"
   \              0x49 0x54    
   \              0x43 0x48    
   \              0x00         
   \   00000007   0x00               DC8 0
    169          
    170          
    171          
    172          
    173          // ############################################################################
    174          // ############################################################################
    175          // Spacers
    176          // ############################################################################
    177          // ############################################################################

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   lcd28_clear
      24   lcd28_init
        24   -> GPIO_Init
        24   -> GPIO_SetBits
        24   -> I2C_AcknowledgeConfig
        24   -> I2C_Cmd
        24   -> I2C_Init
        24   -> I2C_StructInit
        24   -> halCommonDelayMilliseconds
        24   -> lcd_cmd
        24   -> lcd_printStr
        24   -> lcd_setCursor
        24   -> sch_add_loop
       0   lcd28_loop
       0   lcd28_power_up


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       8  ?_0
       2  lcd28_clear
     202  lcd28_init
       2  lcd28_loop
       2  lcd28_power_up

 
 236 bytes in section .text
 
 236 bytes of CODE memory

Errors: none
Warnings: 3
