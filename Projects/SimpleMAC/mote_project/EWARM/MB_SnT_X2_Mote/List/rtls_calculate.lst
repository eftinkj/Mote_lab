###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:28:59
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_CogNet\rtls_calculate.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_CogNet\rtls_calculate.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"rtls_calculate.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_CogNet\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\rtls_calculate.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\rtls_calculate.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_CogNet\rtls_calculate.c
      1          /****************************************************************************
      2          ** 
      3          ** By Guoda Liang <gl5xd@mst.edu>
      4          ** Version: 1.0
      5          **
      6          ****************************************************************************/
      7          #include "string.h"
      8          #include "rtls_calculate.h"
      9          #include "HW_LIB\RTC.h"
     10          

   \                                 In section .bss, align 4
     11          static RSSI_Store rssi_store;
   \                     rssi_store:
   \   00000000                      DS8 96
     12          
     13          void compute_position();
     14          
     15          void res_store();
     16          
     17          /**
     18          * uint8_t request_rssi(unsigned char *p) - attain rssi value from the received packet
     19          *		and calls the related functions to do the calculation
     20          */

   \                                 In section .text, align 2, keep-with-next
     21          float request_rssi(unsigned char *p)
     22          {	
   \                     request_rssi: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     23                 char node=p[1];
     24          	switch(node)
   \   00000002   0x7842             LDRB     R2,[R0, #+1]
   \   00000004   0x....             LDR.N    R1,??DataTable2
   \   00000006   0x2A42             CMP      R2,#+66
   \   00000008   0xF101 0x043C      ADD      R4,R1,#+60
   \   0000000C   0xD004             BEQ.N    ??request_rssi_0
   \   0000000E   0x2A43             CMP      R2,#+67
   \   00000010   0xD004             BEQ.N    ??request_rssi_1
   \   00000012   0x2A45             CMP      R2,#+69
   \   00000014   0xD004             BEQ.N    ??request_rssi_2
   \   00000016   0xE047             B.N      ??request_rssi_3
     25          	{	case 'B':
     26          		rssi_store.current_node=0;
   \                     ??request_rssi_0: (+1)
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0xE002             B.N      ??request_rssi_4
     27          		break;
     28          		case 'C':
     29          		rssi_store.current_node=1;
   \                     ??request_rssi_1: (+1)
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0xE000             B.N      ??request_rssi_4
     30          		break;
     31          		case 'E':
     32          		rssi_store.current_node=2;
   \                     ??request_rssi_2: (+1)
   \   00000020   0x2202             MOVS     R2,#+2
   \                     ??request_rssi_4: (+1)
   \   00000022   0x71A2             STRB     R2,[R4, #+6]
     33          		break;
     34                          default:
     35                          return 0.0;
     36          	}
     37                  int j=8;
     38          	for(int i=0;i<10;i++)
   \   00000024   0x2300             MOVS     R3,#+0
   \   00000026   0x2208             MOVS     R2,#+8
   \   00000028   0x250A             MOVS     R5,#+10
     39          	{
     40                    rssi_store.rssi[rssi_store.current_node][i]=(p[j+1]-'0')*10+(p[j+2]-'0');                
   \                     ??request_rssi_5: (+1)
   \   0000002A   0x1817             ADDS     R7,R2,R0
   \   0000002C   0xEB02 0x0C00      ADD      R12,R2,R0
   \   00000030   0xF994 0x6006      LDRSB    R6,[R4, #+6]
   \   00000034   0xF997 0x7001      LDRSB    R7,[R7, #+1]
   \   00000038   0xF99C 0xC002      LDRSB    R12,[R12, #+2]
   \   0000003C   0xFB05 0x1606      MLA      R6,R5,R6,R1
   \   00000040   0x199E             ADDS     R6,R3,R6
   \   00000042   0xFB05 0xC707      MLA      R7,R5,R7,R12
   \   00000046   0x3F10             SUBS     R7,R7,#+16
   \   00000048   0x77B7             STRB     R7,[R6, #+30]
     41                    if(!(p[j]==' '))
   \   0000004A   0x5C16             LDRB     R6,[R2, R0]
   \   0000004C   0x2E20             CMP      R6,#+32
   \   0000004E   0xD00A             BEQ.N    ??request_rssi_6
     42                      rssi_store.rssi[rssi_store.current_node][i]=(p[j]-'0')*100;
   \   00000050   0xF994 0x7006      LDRSB    R7,[R4, #+6]
   \   00000054   0xFB05 0x1707      MLA      R7,R5,R7,R1
   \   00000058   0x19DF             ADDS     R7,R3,R7
   \   0000005A   0x3E30             SUBS     R6,R6,#+48
   \   0000005C   0xF04F 0x0C64      MOV      R12,#+100
   \   00000060   0xFB0C 0xF606      MUL      R6,R12,R6
   \   00000064   0x77BE             STRB     R6,[R7, #+30]
     43          	  j+=4;
   \                     ??request_rssi_6: (+1)
   \   00000066   0x1D12             ADDS     R2,R2,#+4
     44          	}
   \   00000068   0x1C5B             ADDS     R3,R3,#+1
   \   0000006A   0x2B0A             CMP      R3,#+10
   \   0000006C   0xDBDD             BLT.N    ??request_rssi_5
     45          //        if(!(rssi_store.ready[1][0]||rssi_store.ready[1][1]||rssi_store.ready[1][2]))
     46          //        {
     47          //          if(rtc_get_ticks()-time<60)
     48          //          {
     49          //            for(int i=0;i<10;i++)
     50          //	    {
     51          //              rssi_store.pre_rssi[rssi_store.current_node][i]=rssi_store.rssi[rssi_store.current_node][i];
     52          //	    }
     53          //          }
     54          //          time=rtc_get_ticks();
     55          //        }
     56          //        else
     57          //        {
     58          	  rssi_store.ready[1][rssi_store.current_node]=1;
   \   0000006E   0xF994 0x2006      LDRSB    R2,[R4, #+6]
   \   00000072   0x1852             ADDS     R2,R2,R1
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xF882 0x003F      STRB     R0,[R2, #+63]
     59          //        }
     60          	if(rssi_store.ready[1][0]&&rssi_store.ready[1][1]&&rssi_store.ready[1][2])
   \   0000007A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xBF1C             ITT      NE 
   \   00000080   0x7920             LDRBNE   R0,[R4, #+4]
   \   00000082   0x2800             CMPNE    R0,#+0
   \   00000084   0xD010             BEQ.N    ??request_rssi_3
   \   00000086   0x7960             LDRB     R0,[R4, #+5]
   \   00000088   0xB170             CBZ.N    R0,??request_rssi_3
     61          	{
     62          		if(!(rssi_store.ready[0][0]||rssi_store.ready[0][1]||rssi_store.ready[0][2]))
   \   0000008A   0xF891 0x003C      LDRB     R0,[R1, #+60]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xBF04             ITT      EQ 
   \   00000092   0x7860             LDRBEQ   R0,[R4, #+1]
   \   00000094   0x2800             CMPEQ    R0,#+0
   \   00000096   0xD103             BNE.N    ??request_rssi_7
   \   00000098   0x78A0             LDRB     R0,[R4, #+2]
   \   0000009A   0xB908             CBNZ.N   R0,??request_rssi_7
     63          		{
     64                            res_store();
   \   0000009C   0x.... 0x....      BL       res_store
     65          		}
     66          		compute_position();
   \                     ??request_rssi_7: (+1)
   \   000000A0   0x.... 0x....      BL       compute_position
     67          //		sprintf(str,"%20f",rssi_store.radius);
     68          //		strcpy((char*)p, p1);
     69                          return rssi_store.radius;
   \   000000A4   0x6A20             LDR      R0,[R4, #+32]
   \   000000A6   0xBDF2             POP      {R1,R4-R7,PC}
     70          	}
     71                  return 0.0;
   \                     ??request_rssi_3: (+1)
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     72          }
     73          
     74          /**
     75          * void compute_position() - compute the relative position change
     76          *		based on the rssi value
     77          * no return
     78          */

   \                                 In section .text, align 2, keep-with-next
     79          void compute_position()
     80          {	double x = 0,c = 0,a = 1.0/100.0;
   \                     compute_position: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x46A0             MOV      R8,R4
     81          	for(int j=0;j<3;j++)
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x.... 0x....      LDR.W    R9,??DataTable2
     82          	{
     83                    rssi_store.mean[j]=0,rssi_store.var[j]=0;
   \                     ??compute_position_0: (+1)
   \   0000000E   0xEB09 0x0685      ADD      R6,R9,R5, LSL #+2
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6470             STR      R0,[R6, #+68]
   \   00000016   0x6530             STR      R0,[R6, #+80]
     84          		for(int i=0;i<10;i++)
   \   00000018   0x2700             MOVS     R7,#+0
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0xFB00 0x9005      MLA      R0,R0,R5,R9
   \   00000020   0x9000             STR      R0,[SP, #+0]
     85          		{
     86          			rssi_store.mean[j]+=rssi_store.rssi[j][i];
   \                     ??compute_position_1: (+1)
   \   00000022   0x.... 0x....      BL       ?Subroutine0
     87          		}
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000026   0x6C71             LDR      R1,[R6, #+68]
   \   00000028   0x.... 0x....      BL       __aeabi_fadd
   \   0000002C   0x6470             STR      R0,[R6, #+68]
   \   0000002E   0x1C7F             ADDS     R7,R7,#+1
   \   00000030   0x2F0A             CMP      R7,#+10
   \   00000032   0xDBF6             BLT.N    ??compute_position_1
     88          		rssi_store.mean[j]/=10.0;
   \   00000034   0x....             LDR.N    R1,??DataTable2_1  ;; 0x41200000
   \   00000036   0x.... 0x....      BL       __aeabi_fdiv
   \   0000003A   0x6470             STR      R0,[R6, #+68]
     89          		for(int i=0;i<10;i++)
   \   0000003C   0x2700             MOVS     R7,#+0
     90          		{
     91          			float f=rssi_store.rssi[j][i]-rssi_store.mean[j];
   \                     ??compute_position_2: (+1)
   \   0000003E   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000042   0x6C71             LDR      R1,[R6, #+68]
   \   00000044   0x.... 0x....      BL       __aeabi_fsub
   \   00000048   0x4601             MOV      R1,R0
     92          			rssi_store.var[j]+=f*f;
   \   0000004A   0x.... 0x....      BL       __aeabi_fmul
   \   0000004E   0x6D31             LDR      R1,[R6, #+80]
   \   00000050   0x.... 0x....      BL       __aeabi_fadd
   \   00000054   0x6530             STR      R0,[R6, #+80]
     93          		}
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
   \   00000058   0x2F0A             CMP      R7,#+10
   \   0000005A   0xDBF0             BLT.N    ??compute_position_2
     94          		rssi_store.var[j]/=10.0;
   \   0000005C   0x....             LDR.N    R1,??DataTable2_1  ;; 0x41200000
   \   0000005E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000062   0x6530             STR      R0,[R6, #+80]
     95          		for(int i=0;i<10;i++)
   \   00000064   0x2700             MOVS     R7,#+0
     96          		{
     97          			double f=rssi_store.rssi[j][i]-rssi_store.mean[j];
   \                     ??compute_position_3: (+1)
   \   00000066   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2: (+1)
   \   0000006A   0x6C71             LDR      R1,[R6, #+68]
   \   0000006C   0x.... 0x....      BL       __aeabi_fsub
   \   00000070   0x.... 0x....      BL       __aeabi_f2d
     98          			x+=f*f/rssi_store.var[j];
     99          			x = sqrt(x)*a + c;
   \   00000074   0x4602             MOV      R2,R0
   \   00000076   0x460B             MOV      R3,R1
   \   00000078   0x.... 0x....      BL       __aeabi_dmul
   \   0000007C   0x4682             MOV      R10,R0
   \   0000007E   0x6D30             LDR      R0,[R6, #+80]
   \   00000080   0x468B             MOV      R11,R1
   \   00000082   0x.... 0x....      BL       __aeabi_f2d
   \   00000086   0x4602             MOV      R2,R0
   \   00000088   0x460B             MOV      R3,R1
   \   0000008A   0x4650             MOV      R0,R10
   \   0000008C   0x4659             MOV      R1,R11
   \   0000008E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000092   0x4622             MOV      R2,R4
   \   00000094   0x4643             MOV      R3,R8
   \   00000096   0x.... 0x....      BL       __aeabi_dadd
   \   0000009A   0x.... 0x....      BL       sqrt
   \   0000009E   0x....             LDR.N    R2,??DataTable2_2  ;; 0x47ae147b
   \   000000A0   0x....             LDR.N    R3,??DataTable2_3  ;; 0x3f847ae1
   \   000000A2   0x.... 0x....      BL       __aeabi_dmul
   \   000000A6   0x2200             MOVS     R2,#+0
   \   000000A8   0x2300             MOVS     R3,#+0
   \   000000AA   0x.... 0x....      BL       __aeabi_dadd
    100          		}
   \   000000AE   0x1C7F             ADDS     R7,R7,#+1
   \   000000B0   0x2F0A             CMP      R7,#+10
   \   000000B2   0x4604             MOV      R4,R0
   \   000000B4   0x4688             MOV      R8,R1
   \   000000B6   0xDBD6             BLT.N    ??compute_position_3
    101          	}
   \   000000B8   0x1C6D             ADDS     R5,R5,#+1
   \   000000BA   0x2D03             CMP      R5,#+3
   \   000000BC   0xDBA7             BLT.N    ??compute_position_0
    102          	rssi_store.radius=x;
   \   000000BE   0x.... 0x....      BL       __aeabi_d2f
   \   000000C2   0xF8C9 0x005C      STR      R0,[R9, #+92]
    103          }
   \   000000C6   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x9800             LDR      R0,[SP, #+0]
   \   00000002   0x1838             ADDS     R0,R7,R0
   \   00000004   0xF990 0x001E      LDRSB    R0,[R0, #+30]
   \   00000008   0x.... 0x....      B.W      __aeabi_i2f
    104          
    105          /**
    106          * void res_store() - store rssi value as pre_rssi value
    107          *		for the next calculation
    108          * no return
    109          */

   \                                 In section .text, align 2, keep-with-next
    110          void res_store()
    111          {	for(int i=0;i<3;i++)
   \                     res_store: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable2
    112          	{
    113                    for(int j=0;j<10;j++)
   \                     ??res_store_0: (+1)
   \   00000006   0x230A             MOVS     R3,#+10
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xFB03 0x1300      MLA      R3,R3,R0,R1
    114                    {
    115          		  rssi_store.pre_rssi[i][j]=rssi_store.rssi[i][j];
   \                     ??res_store_1: (+1)
   \   0000000E   0x18D4             ADDS     R4,R2,R3
   \   00000010   0x7FA4             LDRB     R4,[R4, #+30]
   \   00000012   0x54D4             STRB     R4,[R2, R3]
    116                    }
   \   00000014   0x1C52             ADDS     R2,R2,#+1
   \   00000016   0x2A0A             CMP      R2,#+10
   \   00000018   0xDBF9             BLT.N    ??res_store_1
    117          		rssi_store.ready[1][i]= 0;
   \   0000001A   0x1843             ADDS     R3,R0,R1
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0xF883 0x203F      STRB     R2,[R3, #+63]
    118          		rssi_store.ready[0][i]= 1;
    119          	}
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x2201             MOVS     R2,#+1
   \   00000026   0x2803             CMP      R0,#+3
   \   00000028   0xF883 0x203C      STRB     R2,[R3, #+60]
   \   0000002C   0xDBEB             BLT.N    ??res_store_0
    120          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     rssi_store

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x47AE147B         DC32     0x47ae147b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x3F847AE1         DC32     0x3f847ae1

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   compute_position
        40   -> __aeabi_d2f
        40   -> __aeabi_dadd
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> sqrt
      24   request_rssi
        24   -> compute_position
        24   -> res_store
       8   res_store


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
      12  ?Subroutine0
     202  compute_position
     172  request_rssi
      48  res_store
      96  rssi_store

 
  96 bytes in section .bss
 450 bytes in section .text
 
 450 bytes of CODE memory
  96 bytes of DATA memory

Errors: none
Warnings: none
