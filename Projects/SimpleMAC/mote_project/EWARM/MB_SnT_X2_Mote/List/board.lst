###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:26:15
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\board.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\board.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"board.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\board.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\board.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\board.c
      1          /**
      2            ******************************************************************************
      3            * @file    board.c 
      4            * @author  MCD Application Team
      5            * @version V2.0.1
      6            * @date    30-November-2012
      7            * @brief   Board file x STM32W108 Kits boards 
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          
     30          #include PLATFORM_HEADER
     31          #include "board.h"
     32          #include "error.h"
     33          #include "hal.h"
     34          #include "mfg-token.h"
     35          #include <string.h>
     36          
     37          /** @addtogroup HAL
     38            * @{
     39            */
     40          
     41          /** @defgroup board
     42            * @brief board modules
     43            * @{
     44            */
     45          
     46          /* Private define ------------------------------------------------------------*/
     47          /* Private typedef -----------------------------------------------------------*/
     48          /* Private macros ------------------------------------------------------------*/
     49          /* Private variables ---------------------------------------------------------*/
     50          extern GPIO_TypeDef* BUTTON_PORT[]; 
     51          extern const uint16_t BUTTON_PIN[];
     52          
     53          /* Private function prototypes -----------------------------------------------*/
     54          /* Private functions ---------------------------------------------------------*/
     55          
     56          /** @defgroup  board_Private_Functions
     57            * @{
     58            */
     59          
     60          /**
     61            * @brief  Perform board specific action to power down the system, usually before going to deep sleep.
     62            *         This code depends on the actual board features and configure
     63            *         the stm32w and on board devices for minimal power consumption.
     64            *         Customer normally needs to modify this file to adapt it to their specific board. 
     65            * @param  None
     66            * @retval None
     67            */

   \                                 In section .text, align 2, keep-with-next
     68          void halBoardPowerDown(void)
     69          {
   \                     halBoardPowerDown: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     70          #if defined (USE_MB954_REVA) || defined (USE_MB954_REVB) || defined (USE_MB954_REVC)
     71            GPIO_InitTypeDef  GPIO_InitStructure;
     72          #endif /* USE_MB954_REVA or USE_MB954_REVB or USE_MB954_REVC */
     73            
     74            /* Set everything to input value */
     75            GPIOA->CRL = (GPIO_Mode_IN              <<0)|
     76                          (GPIO_Mode_IN              <<4)|
     77                          (GPIO_Mode_IN              <<8)|
     78                          (GPIO_Mode_IN              <<12);
   \   00000002   0x.... 0x....      BL       ?Subroutine0
     79            GPIOA->CRH = (GPIO_Mode_IN              <<0)|  /* PTI EN */
     80                          (GPIO_Mode_IN              <<4)|  /* PTI_DATA */
     81                          (GPIO_Mode_IN              <<8)|
     82                          (GPIO_Mode_IN              <<12);
     83            GPIOB->CRL = (GPIO_Mode_IN              <<0)|
     84                          (GPIO_Mode_IN              <<4)|  /* Uart TX */
     85                          (GPIO_Mode_IN              <<8)|  /* Uart RX */
     86                          (GPIO_Mode_IN              <<12);
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000006   0x....             LDR.N    R0,??DataTable4  ;; 0x4000b400
   \   00000008   0x6001             STR      R1,[R0, #+0]
     87            GPIOB->CRH = (GPIO_Mode_IN              <<0)|
     88                          (GPIO_Mode_IN              <<4)|
     89                          (GPIO_Mode_IN              <<8)|
     90                          (GPIO_Mode_IN              <<12);
   \   0000000A   0x.... 0x....      BL       ?Subroutine1
     91            GPIOC->CRL = (GPIO_Mode_IN              <<0)|
     92                          (GPIO_Mode_IN              <<4)|
     93                          (GPIO_Mode_IN              <<8)|
     94                          (GPIO_Mode_IN              <<12);
     95            GPIOC->CRH = (GPIO_Mode_IN              <<0)|
     96                          (GPIO_Mode_IN              <<4)|
     97                          (GPIO_Mode_IN              <<8)|  /* OSC32K */
     98                          (GPIO_Mode_IN              <<12);  /* OSC32K */
     99          
    100            /* Configure GPIO for BUTTONSs */
    101            STM_EVAL_PBInit(BUTTON_S1, BUTTON_MODE_GPIO);
   \                     ??CrossCallReturnLabel_2: (+1)
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x.... 0x....      BL       STM_EVAL_PBInit
    102          #ifdef USE_MB950  
    103            STM_EVAL_PBInit(BUTTON_S2, BUTTON_MODE_GPIO);
    104            STM_EVAL_PBInit(BUTTON_S3, BUTTON_MODE_GPIO);
    105            STM_EVAL_PBInit(BUTTON_S4, BUTTON_MODE_GPIO);
    106            STM_EVAL_PBInit(BUTTON_S5, BUTTON_MODE_GPIO);
    107          #endif
    108            
    109            /* Configure GPIO for LEDs */
    110            STM_EVAL_LEDInit(LED1);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       STM_EVAL_LEDInit
    111            STM_EVAL_LEDInit(LED3);
   \   0000001A   0xE8BD 0x4002      POP      {R1,LR}
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      B.W      STM_EVAL_LEDInit
    112            
    113          #if defined (USE_MB954_REVA) || defined (USE_MB954_REVB) || defined (USE_MB954_REVC)
    114            /* Configure GPIO for power amplifier */
    115            /* SiGe Ant Sel to output. */
    116            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    117            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT_PP;
    118            GPIO_Init(GPIOB, &GPIO_InitStructure);
    119            /* Set pull-up on PB5 pin */
    120            GPIO_SetBits(GPIOB, GPIO_Pin_5);
    121            /* SiGe Standby */
    122            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    123            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT_PP;
    124            GPIO_Init(GPIOB, &GPIO_InitStructure);
    125            /* Set pull-down on PB6 pin */
    126            GPIO_ResetBits(GPIOB, GPIO_Pin_6);
    127          #endif /* USE_MB954_REVA or USE_MB954_REVB or USE_MB954_REVC */
    128          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x6041             STR      R1,[R0, #+4]
   \   00000002   0x....             LDR.N    R0,??DataTable4_1  ;; 0x4000b800
   \   00000004   0x6001             STR      R1,[R0, #+0]
   \   00000006   0x6041             STR      R1,[R0, #+4]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4000b000
   \   00000002   0xF244 0x4144      MOVW     R1,#+17476
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \   00000008   0x6041             STR      R1,[R0, #+4]
   \   0000000A   0x4770             BX       LR
    129          
    130          /**
    131            * @brief  Perform board specific action to power up the system.
    132            *         This code depends on the actual board features and configure
    133            *         the stm32w and on board devices for proper operation.
    134            *         Customer normally needs to modify this file to adapt it to their specific board.
    135            * @param  None
    136            * @retval None
    137            */

   \                                 In section .text, align 2, keep-with-next
    138          void halBoardPowerUp(void)
    139          {
   \                     halBoardPowerUp: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    140          #if defined (USE_MB954_REVA) || defined (USE_MB954_REVB) || defined (USE_MB954_REVC)
    141            GPIO_InitTypeDef  GPIO_InitStructure;
    142          #endif /* USE_MB954_REVA or USE_MB954_REVB or USE_MB954_REVC */
    143            /* Set everything to input value */
    144            GPIOA->CRL = (GPIO_Mode_IN            <<0)|
    145                         (GPIO_Mode_IN            <<4)|
    146                         (GPIO_Mode_IN            <<8)|
    147                         (GPIO_Mode_IN            <<12);
   \   00000002   0x.... 0x....      BL       ?Subroutine0
    148            GPIOA->CRH = (GPIO_Mode_IN            <<0)|  /* PTI EN */
    149                         (GPIO_Mode_IN            <<4)|  /* PTI_DATA */
    150                         (GPIO_Mode_IN            <<8)|
    151                         (GPIO_Mode_IN            <<12);
    152            GPIOB->CRL = (GPIO_Mode_IN            <<0)|
    153                         (GPIO_Mode_AF_PP         <<4)|  /* Uart TX */
    154                         (GPIO_Mode_IN            <<8)|  /* Uart RX */
    155                         (GPIO_Mode_IN            <<12);
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000006   0xF244 0x4294      MOVW     R2,#+17556
   \   0000000A   0x....             LDR.N    R0,??DataTable4  ;; 0x4000b400
   \   0000000C   0x6002             STR      R2,[R0, #+0]
    156            GPIOB->CRH = (GPIO_Mode_IN            <<0)|
    157                         (GPIO_Mode_IN            <<4)|
    158                         (GPIO_Mode_IN            <<8)|
    159                         (GPIO_Mode_IN            <<12);
   \   0000000E   0x.... 0x....      BL       ?Subroutine1
    160            GPIOC->CRL = (GPIO_Mode_IN            <<0)|
    161                         (GPIO_Mode_IN            <<4)|
    162                         (GPIO_Mode_IN            <<8)|
    163                         (GPIO_Mode_IN            <<12);
    164            GPIOC->CRH = (GPIO_Mode_IN            <<0)|
    165                         (GPIO_Mode_IN            <<4)|
    166                         (GPIO_Mode_IN            <<8)|  /* OSC32K */
    167                         (GPIO_Mode_IN            <<12);  /* OSC32K */
    168            
    169          #ifndef USE_MB951  
    170            /* Configure GPIO for I2C access */
    171          #ifdef USE_MB_SNT_X2
    172            //
    173          #else
    174            LIS302DL_LowLevel_Init();
    175          #endif /* else #ifdef USE_MB_SNT_X2) */
    176          #endif /* USE_MB951 */  
    177            
    178            /* Configure GPIO for LEDs */
    179            STM_EVAL_LEDInit(LED1);
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000012   0x.... 0x....      BL       STM_EVAL_LEDInit
    180            STM_EVAL_LEDInit(LED3);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       STM_EVAL_LEDInit
    181            /* Configure GPIO for BUTTONSs */
    182            STM_EVAL_PBInit(BUTTON_S1, BUTTON_MODE_GPIO);
   \   0000001C   0xE8BD 0x4004      POP      {R2,LR}
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      B.W      STM_EVAL_PBInit
    183          #ifdef USE_MB950  
    184            STM_EVAL_PBInit(BUTTON_S2, BUTTON_MODE_GPIO);
    185            STM_EVAL_PBInit(BUTTON_S3, BUTTON_MODE_GPIO);
    186            STM_EVAL_PBInit(BUTTON_S4, BUTTON_MODE_GPIO);
    187            STM_EVAL_PBInit(BUTTON_S5, BUTTON_MODE_GPIO);
    188          #endif
    189          
    190          #if defined (USE_MB954_REVA) || defined (USE_MB954_REVB) || defined (USE_MB954_REVC)
    191            /* Configure GPIO for power amplifier */
    192            /* SiGe Ant Sel to output. */
    193            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    194            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT_PP;
    195            GPIO_Init(GPIOB, &GPIO_InitStructure);
    196            /* Set pull-up on PB5 pin */
    197            GPIO_SetBits(GPIOB, GPIO_Pin_5);
    198            /* SiGe Standby */
    199            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    200            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT_PP;
    201            GPIO_Init(GPIOB, &GPIO_InitStructure);
    202            /* Set pull-up on PB6 pin */
    203            GPIO_SetBits(GPIOB, GPIO_Pin_6);
    204            /* SiGe LNA (default LNA off )*/
    205            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    206            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT_PP;
    207            GPIO_Init(GPIOB, &GPIO_InitStructure);
    208            /* Set pull-down on PB7 pin */
    209            GPIO_ResetBits(GPIOB, GPIO_Pin_7);
    210            /* SiGe nTX Active */
    211            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    212            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    213            GPIO_Init(GPIOC, &GPIO_InitStructure); 
    214          #endif /* USE_MB954_REVA or USE_MB954_REVB or USE_MB954_REVC */
    215          }
    216          
    217          /**
    218            * @brief  Wake up GPIO button configuration
    219            * @param  None
    220            * @retval Wake button 
    221            */

   \                                 In section .text, align 2, keep-with-next
    222          uint32_t halButtonSnWakeSource(Button_TypeDef Button)
    223          {
    224            if(BUTTON_PORT[Button] == GPIOA)
   \                     halButtonSnWakeSource: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_3
   \   00000002   0x....             LDR.N    R3,??DataTable4_2  ;; 0x4000b000
   \   00000004   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000008   0x....             LDR.N    R2,??DataTable4_4
   \   0000000A   0x4299             CMP      R1,R3
   \   0000000C   0xD102             BNE.N    ??halButtonSnWakeSource_0
    225            {
    226              return BUTTON_PIN[Button];
   \   0000000E   0xF832 0x0010      LDRH     R0,[R2, R0, LSL #+1]
   \   00000012   0x4770             BX       LR
    227            }
    228            else if (BUTTON_PORT[Button] == GPIOB)
   \                     ??halButtonSnWakeSource_0: (+1)
   \   00000014   0x....             LDR.N    R3,??DataTable4  ;; 0x4000b400
   \   00000016   0x4299             CMP      R1,R3
   \   00000018   0xD103             BNE.N    ??halButtonSnWakeSource_1
    229            {
    230              return (BUTTON_PIN[Button] << 8);
   \   0000001A   0xF832 0x0010      LDRH     R0,[R2, R0, LSL #+1]
   \   0000001E   0x0200             LSLS     R0,R0,#+8
   \   00000020   0x4770             BX       LR
    231            }
    232            else if (BUTTON_PORT[Button] == GPIOC)
   \                     ??halButtonSnWakeSource_1: (+1)
   \   00000022   0x....             LDR.N    R3,??DataTable4_1  ;; 0x4000b800
   \   00000024   0x4299             CMP      R1,R3
   \   00000026   0xD103             BNE.N    ??halButtonSnWakeSource_2
    233            {
    234              return (BUTTON_PIN[Button] << 16);
   \   00000028   0xF832 0x0010      LDRH     R0,[R2, R0, LSL #+1]
   \   0000002C   0x0400             LSLS     R0,R0,#+16
   \   0000002E   0x4770             BX       LR
    235            }
    236            else
    237            {
    238              return 0;
   \                     ??halButtonSnWakeSource_2: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x4770             BX       LR               ;; return
    239            }
    240          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x4000B400         DC32     0x4000b400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x4000B800         DC32     0x4000b800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4000B000         DC32     0x4000b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     BUTTON_PORT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     BUTTON_PIN
    241          
    242          /**
    243            * @}
    244            */
    245          
    246          /**
    247            * @}
    248            */ 
    249          
    250          /**
    251            * @}
    252            */
    253          
    254          
    255          
    256          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   halBoardPowerDown
         0   -> STM_EVAL_LEDInit
         8   -> STM_EVAL_LEDInit
         8   -> STM_EVAL_PBInit
       8   halBoardPowerUp
         8   -> STM_EVAL_LEDInit
         0   -> STM_EVAL_PBInit
       0   halButtonSnWakeSource


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
      12  ?Subroutine0
      12  ?Subroutine1
      36  halBoardPowerDown
      40  halBoardPowerUp
      52  halButtonSnWakeSource

 
 172 bytes in section .text
 
 172 bytes of CODE memory

Errors: none
Warnings: none
