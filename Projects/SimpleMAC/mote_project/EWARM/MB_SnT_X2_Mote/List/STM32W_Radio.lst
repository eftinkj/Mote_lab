###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:30:40
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_STM32W\STM32W_Radio.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_STM32W\STM32W_Radio.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"STM32W_Radio.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_STM32W\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\STM32W_Radio.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\STM32W_Radio.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_STM32W\STM32W_Radio.c
      1          
      2          #include "STM32W_Radio.h"
      3          #include "phy-library.h"
      4          
      5          
      6          #ifdef _ARM_
      7          
      8          #include "FEAT_Networking/Phy_layer.h"
      9          #include "FEAT_Scheduler/sch_basic_pub.h"
     10          #include "FEAT_Routing/routing.h"
     11          #include "FEAT_Queuing/Queuing.h"
     12          #include "Application.h"
     13          #include "common.h"
     14          
     15          
     16          //uint8_t dbug_test = 0;
     17          
     18          // #ifdef _ARM_
     19          /* buffer for received packet */
     20          //	extern uint8_t rxPacket[128];
     21          /* received packet flag */
     22          //	extern boolean packetReceived;
     23          //	extern int8_t rxPacketRSSI;
     24          // #endif // _ARM_
     25          
     26          uint16_t radio_dst = 0;
     27          
     28          uint8_t stradio_pending_len_ = 0;
     29          sint8_t *stradio_pending_data_ = NULL;
     30          uint16_t stradio_pending_dst_ = 0;
     31          
     32          int8_t stradio_power_ = 3;
     33          
     34          // Shortened ADDRESSES
     35          uint8_t	my_addr8_;// = MY_ADDR;
     36          uint16_t	my_addr16_;// = MY_ADDR;
     37          
     38          
     39          #define STALLED_THRESHOLD	10
     40          uint32_t count_stalled = 0;
     41          uint32_t stalled_reset = STALLED_THRESHOLD;
     42          
     43          uint32_t stradio_count_ov_priority_ = 0; /// count how many packets dropped due to overrun (Priority packets only)
     44          		
     45          uint32_t tx_count_ = 0;
     46          uint32_t tx_isr_count_ = 0;
     47          
     48          // TX ISR related variables:
     49          uint32_t count_succ_ = 0;
     50          uint32_t count_cca_ = 0;
     51          uint32_t count_nack_ = 0;
     52          uint32_t count_ack_ = 0;
     53          int32_t stradio_resend_ = -1;
     54          uint32_t count_resend_ = 0;
     55          StStatus last_status_ = 0;
     56          
     57          uint8_t txTIDX = SCH_NO_TIMEOUT_ID;
     58          boolean stradio_retransmit_req_;
     59          uint32_t stradio_count_failed_retransmissions_ = 0;
     60          char str_stradio_PktTO[] = "STRadio_Pkt_Tx_TO";
     61          
     62          StStatus volatile result_1 = 0;
     63          

   \                                 In section .text, align 2, keep-with-next
     64          void radio_init()
     65          {
   \                     radio_init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     66          #ifdef EUI64_TRUNK_ID
     67          	{
     68          		uint8_t *eui = ST_RadioGetEui64();
   \   00000002   0x.... 0x....      BL       ST_RadioGetEui64
     69          		my_addr8_ = eui[0];
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x....             LDR.N    R4,??DataTable5
   \   0000000A   0x7060             STRB     R0,[R4, #+1]
     70          		my_addr16_ = my_addr8_;
   \   0000000C   0x8160             STRH     R0,[R4, #+10]
     71          	}
     72          #else
     73          	{
     74          		my_addr8_ = MY_ADDR;
     75          		my_addr16_ = MY_ADDR;
     76          	}
     77          #endif
     78          	result_1 = ST_RadioSetPowerMode(0x00);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       ST_RadioSetPowerMode
   \   00000014   0x7160             STRB     R0,[R4, #+5]
     79          #ifdef _STM32W_HIGH_POWER_
     80          	// For High Power Module use this
     81          	uint16_t txPowerMode = 0x0001; //USER_TX_POWER_MODE; // Boost and alternate Tx/RX
     82          	result_1 = ST_RadioSetPowerMode(txPowerMode);
     83          	GPIO_PCCFGH = GPIO_PCCFGH & 0xFFFFFF0F; // PC5
     84          	GPIO_PCCFGH = GPIO_PCCFGH | 0x00000090; // PC5 = 0x9 - Special function (TX select)
     85          	// Prepare PB5, PB6, PB7 for controlling the external amplifier
     86          	GPIO_PBCFGH = GPIO_PBCFGH & 0xFFFF000F;
     87          	GPIO_PBCFGH = GPIO_PBCFGH | 0x00001110;
     88          	GPIO_PBCLR = 0x000000E0;
     89          	GPIO_PBSET = 0x000000C0; // 0xC - enable LNA and activate chip, 0x4 - enable chip (exit sleep)
     90          #endif //_STM32W_HIGH_POWER_
     91          
     92          	my_rf_channel_ = DEFAULT_RF_CHANNEL;
   \   00000016   0x2014             MOVS     R0,#+20
   \   00000018   0x....             LDR.N    R5,??DataTable5_1
     93          	my_tx_power_ = DEFAULT_TX_POWER; // configured power level (default for orodinary communication
   \   0000001A   0x....             LDR.N    R6,??DataTable5_2
   \   0000001C   0x7028             STRB     R0,[R5, #+0]
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0x7030             STRB     R0,[R6, #+0]
     94          	stradio_retransmit_req_ = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x7120             STRB     R0,[R4, #+4]
     95          	ST_RadioSetNodeId(MY_ADDR);
   \   00000026   0x7860             LDRB     R0,[R4, #+1]
   \   00000028   0x.... 0x....      BL       ST_RadioSetNodeId
     96          	ST_RadioSetPanId(MY_PAN_ID);
   \   0000002C   0xF243 0x3032      MOVW     R0,#+13106
   \   00000030   0x.... 0x....      BL       ST_RadioSetPanId
     97          	result_1 = ST_RadioSetChannel(my_rf_channel_);
   \   00000034   0x7828             LDRB     R0,[R5, #+0]
   \   00000036   0x.... 0x....      BL       ST_RadioSetChannel
   \   0000003A   0x7160             STRB     R0,[R4, #+5]
     98          	
     99          	phy_set_power_level ( my_tx_power_ );
   \   0000003C   0x7830             LDRB     R0,[R6, #+0]
   \   0000003E   0x.... 0x....      BL       phy_set_power_level
    100          	stradio_pending_len_ = 0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x7020             STRB     R0,[R4, #+0]
    101          	stradio_pending_data_ = NULL;
   \   00000046   0x60E0             STR      R0,[R4, #+12]
    102          	stradio_pending_dst_ = 0;
   \   00000048   0x8120             STRH     R0,[R4, #+8]
    103          	
    104          	sch_add_loop((sch_loop_func_t)radio_loop);
   \   0000004A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000004E   0x.... 0x....      ADR.W    R0,radio_loop
   \   00000052   0x.... 0x....      B.W      sch_add_loop
    105          	
    106          
    107          //	GPIO_PBOUT =
    108          }

   \                                 In section .data, align 4
   \                     stradio_pending_len_:
   \   00000000   0x00               DC8 0
   \                     my_addr8_:
   \   00000001   0x00               DC8 0
   \                     last_status_:
   \   00000002   0x00               DC8 0
   \                     txTIDX:
   \   00000003   0xFF               DC8 255
   \                     stradio_retransmit_req_:
   \   00000004   0x00               DC8 0
   \                     result_1:
   \   00000005   0x00               DC8 0
   \                     radio_dst:
   \   00000006   0x0000             DC16 0
   \                     stradio_pending_dst_:
   \   00000008   0x0000             DC16 0
   \                     my_addr16_:
   \   0000000A   0x00 0x00          DC8 0, 0
   \                     stradio_pending_data_:
   \   0000000C   0x00000000         DC32 0H
   \                     count_stalled:
   \   00000010   0x00000000         DC32 0
   \                     stalled_reset:
   \   00000014   0x0000000A         DC32 10
   \                     stradio_count_ov_priority_:
   \   00000018   0x00000000         DC32 0
   \                     tx_count_:
   \   0000001C   0x00000000         DC32 0
   \                     tx_isr_count_:
   \   00000020   0x00000000         DC32 0
   \                     count_succ_:
   \   00000024   0x00000000         DC32 0
   \                     count_cca_:
   \   00000028   0x00000000         DC32 0
   \                     count_nack_:
   \   0000002C   0x00000000         DC32 0
   \                     count_ack_:
   \   00000030   0x00000000         DC32 0
   \                     stradio_resend_:
   \   00000034   0xFFFFFFFF         DC32 -1
   \                     count_resend_:
   \   00000038   0x00000000         DC32 0
   \                     stradio_count_failed_retransmissions_:
   \   0000003C   0x00000000         DC32 0
    109          
    110          
    111          int stradio_retransmision_result = 0;
   \                     stradio_retransmision_result:
   \   00000040   0x00000000         DC32 0
   \                     str_stradio_PktTO:
   \   00000044   0x53 0x54          DC8 "STRadio_Pkt_Tx_TO"
   \              0x52 0x61    
   \              0x64 0x69    
   \              0x6F 0x5F    
   \              0x50 0x6B    
   \              0x74 0x5F    
   \              0x54 0x78    
   \              0x5F 0x54    
   \              0x4F 0x00    
   \   00000056   0x00 0x00          DC8 0, 0

   \                                 In section .data, align 1
   \                     stradio_power_:
   \   00000000   0x03               DC8 3
    112          /*******************************************************************************
    113          * Function Name  : radio_loop
    114          * Description    : When Radio is idle then checks for packets to be transmitted
    115          * Input          : None
    116          * Output         : None
    117          * Return         : None
    118          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    119          void radio_loop()
    120          {
   \                     radio_loop: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    121          	// if the TX is idle then dequeue next packet and start TX
    122          	CLEAR_LED(RLED);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       STM_EVAL_LEDOff
    123          	if ( 1 == stradio_retransmit_req_)
   \   00000008   0x....             LDR.N    R6,??DataTable5
   \   0000000A   0x....             LDR.N    R4,??DataTable5_3
   \   0000000C   0x7930             LDRB     R0,[R6, #+4]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD114             BNE.N    ??radio_loop_0
    124          	{
    125          		#if defined(_ENABLE_XBEE_COMPAT_4BS_TX_) || defined(_FORCE_XBEE_COMPAT_TX_)
    126          			#ifdef _FORCE_XBEE_COMPAT_TX_
    127          				if (1)
    128          			#else
    129                   	   if (BS_ADDR == txPacket[6])
   \   00000012   0x....             LDR.N    R0,??DataTable5_4
   \   00000014   0x7981             LDRB     R1,[R0, #+6]
   \   00000016   0x29FE             CMP      R1,#+254
   \   00000018   0xD102             BNE.N    ??radio_loop_1
    130          			#endif //_FORCE_XBEE_COMPAT_TX_
    131                   	   {
    132          					//txPacket[10]++;// = txPacket[3]; /* XBee COMPATIBILITY - increment sequence number */
    133          					txPacket[3]++;
   \   0000001A   0x78C1             LDRB     R1,[R0, #+3]
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
   \   0000001E   0x70C1             STRB     R1,[R0, #+3]
    134          				}
    135          		#endif // defined(_ENABLE_XBEE_COMPAT_4BS_TX_) || defined(_FORCE_XBEE_COMPAT_TX_)
    136          		int temp_ret = ST_RadioTransmit(txPacket);
   \                     ??radio_loop_1: (+1)
   \   00000020   0x.... 0x....      BL       ST_RadioTransmit
    137          		if (ST_SUCCESS != temp_ret)
   \   00000024   0xB110             CBZ.N    R0,??radio_loop_2
    138          		{
    139          			txComplete = TRUE; // FAILED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   \   00000026   0x2101             MOVS     R1,#+1
    140          			stradio_retransmision_result = temp_ret;
   \   00000028   0x6430             STR      R0,[R6, #+64]
   \   0000002A   0xE003             B.N      ??radio_loop_3
    141          		}
    142          		else
    143          		{
    144          			txComplete = FALSE;
    145          			stradio_count_failed_retransmissions_++;
   \                     ??radio_loop_2: (+1)
   \   0000002C   0x6BF0             LDR      R0,[R6, #+60]
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x63F0             STR      R0,[R6, #+60]
    146          		}
    147          		stradio_retransmit_req_ = 0;
   \                     ??radio_loop_3: (+1)
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x7130             STRB     R0,[R6, #+4]
   \   00000038   0x7021             STRB     R1,[R4, #+0]
   \   0000003A   0xBDF1             POP      {R0,R4-R7,PC}
    148          	} else
    149          	if (FALSE == txComplete)
   \                     ??radio_loop_0: (+1)
   \   0000003C   0x7820             LDRB     R0,[R4, #+0]
   \   0000003E   0xB928             CBNZ.N   R0,??radio_loop_4
    150          	{
    151          		SET_LED(RLED);
   \   00000040   0x.... 0x....      BL       STM_EVAL_LEDOn
    152          		count_stalled++;
   \   00000044   0x6930             LDR      R0,[R6, #+16]
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0x6130             STR      R0,[R6, #+16]
    153          		if (count_stalled > stalled_reset)
   \   0000004A   0xBDF1             POP      {R0,R4-R7,PC}
    154          		{
    155          			//stalled_reset = count_stalled + STALLED_THRESHOLD;
    156          			//txComplete = TRUE;
    157          		}
    158          	} else if ( 0 != stradio_pending_len_ )
   \                     ??radio_loop_4: (+1)
   \   0000004C   0x7830             LDRB     R0,[R6, #+0]
   \   0000004E   0xB130             CBZ.N    R0,??radio_loop_5
    159          	{
    160          		sendPacketData( stradio_pending_len_, stradio_pending_data_, stradio_pending_dst_);
   \   00000050   0x8932             LDRH     R2,[R6, #+8]
   \   00000052   0x68F1             LDR      R1,[R6, #+12]
   \   00000054   0x.... 0x....      BL       sendPacketData
    161          		stradio_pending_len_ = 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x7030             STRB     R0,[R6, #+0]
   \   0000005C   0xBDF1             POP      {R0,R4-R7,PC}
    162          	} else if ( ( 0 == pkt_to_sent_len ) && ( 0xFF == pkt_to_sent_id ) )
   \                     ??radio_loop_5: (+1)
   \   0000005E   0x....             LDR.N    R4,??DataTable5_5
   \   00000060   0x7820             LDRB     R0,[R4, #+0]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xBF02             ITTT     EQ 
   \   00000066   0x....             LDREQ.N  R5,??DataTable5_6
   \   00000068   0x7828             LDRBEQ   R0,[R5, #+0]
   \   0000006A   0x28FF             CMPEQ    R0,#+255
   \   0000006C   0xD141             BNE.N    ??radio_loop_6
    163          	{
    164          		stalled_reset++;
   \   0000006E   0x6970             LDR      R0,[R6, #+20]
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \   00000072   0x6170             STR      R0,[R6, #+20]
    165          		pkt_to_sent_id = que_deQpackets();
   \   00000074   0x.... 0x....      BL       que_deQpackets
    166          		if ( 0xFF != pkt_to_sent_id )
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0x7028             STRB     R0,[R5, #+0]
   \   0000007C   0xD039             BEQ.N    ??radio_loop_6
    167          		{
    168          			char routed = 0;
    169          			unsigned int base = QBUFF_BASE ( pkt_to_sent_id );
   \   0000007E   0x2264             MOVS     R2,#+100
   \   00000080   0xFB02 0xF700      MUL      R7,R2,R0
    170          			// fill the TX-related variables
    171          			pkt_to_sent_len = PAK_GET_TOTAL_LENGTH ( pkt_to_sent_id );
   \   00000084   0x....             LDR.N    R6,??DataTable5_7
   \   00000086   0x19B9             ADDS     R1,R7,R6
    172          			// routing decisions for the packet
    173          			routed = routing_send_DATA_base ( QBUFF_BASE ( pkt_to_sent_id ) );
   \   00000088   0x4350             MULS     R0,R2,R0
   \   0000008A   0xF991 0x1006      LDRSB    R1,[R1, #+6]
   \   0000008E   0x1DC9             ADDS     R1,R1,#+7
   \   00000090   0x7021             STRB     R1,[R4, #+0]
   \   00000092   0x.... 0x....      BL       routing_send_DATA_base
   \   00000096   0xB2C1             UXTB     R1,R0
    174          			// If routing OK then start transmission process -> backoff
    175          			if ( 1 == routed )
   \   00000098   0x2901             CMP      R1,#+1
   \   0000009A   0xD116             BNE.N    ??radio_loop_7
    176          			{
    177          				unsigned int mac_d = get_dst_mac_base ( base );
   \   0000009C   0x4638             MOV      R0,R7
   \   0000009E   0x.... 0x....      BL       get_dst_mac_base
   \   000000A2   0x4602             MOV      R2,R0
    178          				sent_DATA_ = 1;
   \   000000A4   0x....             LDR.N    R1,??DataTable5_8
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x7008             STRB     R0,[R1, #+0]
    179          				sendPacketData(pkt_to_sent_len, (sint8_t*)&(QBUFF_ACCESS(base, 0)) , mac_d ); // send via the backoff implementation
   \   000000AA   0x19B9             ADDS     R1,R7,R6
   \   000000AC   0x7820             LDRB     R0,[R4, #+0]
   \   000000AE   0x.... 0x....      BL       sendPacketData
    180          				phy_sent_timeout_ = rtc_get_ticks() + my_tx_timeout_;
   \   000000B2   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   000000B6   0x....             LDR.N    R1,??DataTable5_9
   \   000000B8   0x6809             LDR      R1,[R1, #+0]
   \   000000BA   0x1808             ADDS     R0,R1,R0
   \   000000BC   0x....             LDR.N    R1,??DataTable5_10
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    181          				SET_LED(YLED);
   \   000000C0   0x2001             MOVS     R0,#+1
   \   000000C2   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   000000C6   0x.... 0x....      B.W      STM_EVAL_LEDOn
    182          			}
    183          			else
    184          			{
    185          				if (ROUTING_BEGAN_ROUTE_DISCOVERY == routed)
   \                     ??radio_loop_7: (+1)
   \   000000CA   0x7828             LDRB     R0,[R5, #+0]
   \   000000CC   0x2903             CMP      R1,#+3
   \   000000CE   0xD107             BNE.N    ??radio_loop_8
    186          				{
    187          					// re-enqueue the packet
    188          					if (0 == que_enQpacket (pkt_to_sent_id))
   \   000000D0   0x.... 0x....      BL       que_enQpacket
   \   000000D4   0xB148             CBZ.N    R0,??radio_loop_9
    189          					{
    190          						release_pkt_in_tx();
    191          					}
    192          					else
    193          					{
    194          						pkt_to_sent_len = 0;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x7020             STRB     R0,[R4, #+0]
    195          						pkt_to_sent_id = 0xFF;
   \   000000DA   0x20FF             MOVS     R0,#+255
   \   000000DC   0x7028             STRB     R0,[R5, #+0]
   \   000000DE   0xBDF1             POP      {R0,R4-R7,PC}
    196          					}
    197          				}
    198          				else
    199          				{
    200          #ifdef _ENABLE_APP_MOD_
    201          					app_drop_pkt ( pkt_to_sent_id, MODULE_RTR, REASON_NOROUTE, EVENT_DSEND );
   \                     ??radio_loop_8: (+1)
   \   000000E0   0x2201             MOVS     R2,#+1
   \   000000E2   0x2301             MOVS     R3,#+1
   \   000000E4   0x4611             MOV      R1,R2
   \   000000E6   0x.... 0x....      BL       app_drop_pkt
    202          #endif // _ENABLE_APP_MOD_
    203          					// drop packet if not routable
    204          					release_pkt_in_tx();
   \                     ??radio_loop_9: (+1)
   \   000000EA   0xE8BD 0x40F1      POP      {R0,R4-R7,LR}
   \   000000EE   0x.... 0x....      B.W      release_pkt_in_tx
    205          				}
    206          			}
    207          		}
    208          	}
    209          }
   \                     ??radio_loop_6: (+1)
   \   000000F2   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    210          
    211          
    212          /*******************************************************************************
    213          * Function Name  : sendPacketData
    214          * Description    : It allows to transmit the data
    215          * Input          : - lenght of the data
    216          *                  - data to be transmitted
    217          *                  - 16bit destination address
    218          * Output         : None
    219          * Return         : (bool) (1) if successfuly requested TX
    220          *					(0) if failed to TX (e.g. due to ongoing tx)
    221          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    222          boolean sendPacketData(uint8_t length, sint8_t *data, uint16_t dst)
    223          {
   \                     sendPacketData: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    224          	ATOMIC(
    225          		if (FALSE == txComplete) return 0;
    226          		if (txComplete == TRUE)  { txComplete = FALSE; }
    227          	)
   \   00000004   0xF3EF 0x8011      MRS      R0,BASEPRI
   \   00000008   0x2360             MOVS     R3,#+96
   \   0000000A   0xF383 0x8811      MSR      BASEPRI,R3
   \   0000000E   0x....             LDR.N    R5,??DataTable5_3
   \   00000010   0x782B             LDRB     R3,[R5, #+0]
   \   00000012   0xB90B             CBNZ.N   R3,??sendPacketData_0
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??sendPacketData_0: (+1)
   \   00000018   0x2B01             CMP      R3,#+1
   \   0000001A   0xBF04             ITT      EQ 
   \   0000001C   0x2300             MOVEQ    R3,#+0
   \   0000001E   0x702B             STRBEQ   R3,[R5, #+0]
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0xF380 0x8811      MSR      BASEPRI,R0
    228          		if (txComplete == FALSE)
   \   00000026   0x7828             LDRB     R0,[R5, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD13A             BNE.N    ??sendPacketData_1
    229          		{
    230          			stm32_pkt16_t *p = (stm32_pkt16_t *)txPacket;
    231          			p->fcf.src_mode = MAC_ADDR_MODE_16BIT;
    232          			p->fcf.dst_mode = MAC_ADDR_MODE_16BIT;
   \   0000002C   0x....             LDR.N    R6,??DataTable5_4
    233          			p->dst_addr = dst;
    234          			radio_dst = dst;
   \   0000002E   0x....             LDR.N    R7,??DataTable5
   \   00000030   0xF8B6 0x0001      LDRH     R0,[R6, #+1]
   \   00000034   0x80F2             STRH     R2,[R6, #+6]
   \   00000036   0xF243 0x33FF      MOVW     R3,#+13311
   \   0000003A   0x4018             ANDS     R0,R3,R0
   \   0000003C   0xF440 0x4008      ORR      R0,R0,#0x8800
   \   00000040   0xF8A6 0x0001      STRH     R0,[R6, #+1]
   \   00000044   0x2AFE             CMP      R2,#+254
   \   00000046   0x7878             LDRB     R0,[R7, #+1]
   \   00000048   0x80FA             STRH     R2,[R7, #+6]
   \   0000004A   0xD104             BNE.N    ??sendPacketData_2
    235          #if defined(_ENABLE_XBEE_COMPAT_4BS_TX_) || defined(_FORCE_XBEE_COMPAT_TX_)
    236          	#ifdef _FORCE_XBEE_COMPAT_TX_
    237          			if (1)
    238          	#else
    239                      if (BS_ADDR == dst)
    240          	#endif //_FORCE_XBEE_COMPAT_TX_
    241                      {
    242          				txPacket[10] = txPacket[3]; /* XBee COMPATIBILITY - increment sequence number */
   \   0000004C   0x78F2             LDRB     R2,[R6, #+3]
   \   0000004E   0x72B2             STRB     R2,[R6, #+10]
    243          				txPacket[11] = 0x80; //??
   \   00000050   0x2280             MOVS     R2,#+128
   \   00000052   0x72F2             STRB     R2,[R6, #+11]
    244          //				p->src_addr = MY_ADDR; 	// used for XBee repeat filtering
    245          				p->src_pan = MY_ADDR;	// this is the actual ADDRESS of the source;
   \   00000054   0xE000             B.N      ??sendPacketData_3
    246          			}
    247          			else
    248          #endif // defined(_ENABLE_XBEE_COMPAT_4BS_TX_) || defined(_FORCE_XBEE_COMPAT_TX_)
    249          			{
    250          				p->src_addr = MY_ADDR;
   \                     ??sendPacketData_2: (+1)
   \   00000056   0x8170             STRH     R0,[R6, #+10]
    251          				p->src_pan = MY_ADDR;
   \                     ??sendPacketData_3: (+1)
   \   00000058   0x8130             STRH     R0,[R6, #+8]
    252          			}
    253          			halCommonMemCopy(txPacket+12, data, length);
   \   0000005A   0x4622             MOV      R2,R4
   \   0000005C   0xF106 0x000C      ADD      R0,R6,#+12
   \   00000060   0x.... 0x....      BL       halCommonMemCopy
    254          			txPacket[0] = length + 2 + 11;
   \   00000064   0xF104 0x000D      ADD      R0,R4,#+13
   \   00000068   0x7030             STRB     R0,[R6, #+0]
    255          			txPacket[3]++; /* increment sequence number */
   \   0000006A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000006C   0x1C40             ADDS     R0,R0,#+1
   \   0000006E   0x70F0             STRB     R0,[R6, #+3]
    256          			tx_count_++;
   \   00000070   0x69F8             LDR      R0,[R7, #+28]
   \   00000072   0x1C40             ADDS     R0,R0,#+1
   \   00000074   0x61F8             STR      R0,[R7, #+28]
    257          			if (ST_SUCCESS != ST_RadioTransmit(txPacket))
   \   00000076   0x4630             MOV      R0,R6
   \   00000078   0x.... 0x....      BL       ST_RadioTransmit
   \   0000007C   0xB110             CBZ.N    R0,??sendPacketData_4
    258          			{
    259          				txComplete = TRUE; // FAILED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x7028             STRB     R0,[R5, #+0]
   \   00000082   0xE00E             B.N      ??sendPacketData_1
    260          			}
    261          			else
    262          			{
    263          				stradio_resend_ = STRADIO_DEFAULT_RETRANSMISSION_COUNT;
   \                     ??sendPacketData_4: (+1)
   \   00000084   0x200A             MOVS     R0,#+10
   \   00000086   0x6378             STR      R0,[R7, #+52]
    264          				if(stradio_resend_ > 0)
    265          				{
    266          					txTIDX = sch_create_timeout(rtc_get_ticks()+my_tx_timeout_, hPacketTimeout, &txTIDX, str_stradio_PktTO);
   \   00000088   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000008C   0xF107 0x0344      ADD      R3,R7,#+68
   \   00000090   0x....             LDR.N    R4,??DataTable5_9
   \   00000092   0x.... 0x....      ADR.W    R1,hPacketTimeout
   \   00000096   0x6824             LDR      R4,[R4, #+0]
   \   00000098   0x1CFA             ADDS     R2,R7,#+3
   \   0000009A   0x1820             ADDS     R0,R4,R0
   \   0000009C   0x.... 0x....      BL       sch_create_timeout
   \   000000A0   0x70F8             STRB     R0,[R7, #+3]
    267          				}
    268          			}
    269          		}
    270          	return (~txComplete);
   \                     ??sendPacketData_1: (+1)
   \   000000A2   0x7828             LDRB     R0,[R5, #+0]
   \   000000A4   0x43C0             MVNS     R0,R0
   \   000000A6   0xB2C0             UXTB     R0,R0
   \   000000A8   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    271          }/* end sendPacketData() */
    272          
    273          
    274          
    275          

   \                                 In section .text, align 2, keep-with-next
    276          void sendPriorityPacket(uint8_t length, sint8_t *data, uint16_t dst)
    277          {
   \                     sendPriorityPacket: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    278          	if (0)//(TRUE == txComplete)
    279          	{
    280          		sendPacketData( length, data, dst);
    281          	}
    282          	else
    283          	{
    284          		if (0 != stradio_pending_len_)
   \   00000002   0x....             LDR.N    R3,??DataTable5
   \   00000004   0x781C             LDRB     R4,[R3, #+0]
   \   00000006   0xB114             CBZ.N    R4,??sendPriorityPacket_0
    285          		{
    286          			stradio_count_ov_priority_++;
   \   00000008   0x699C             LDR      R4,[R3, #+24]
   \   0000000A   0x1C64             ADDS     R4,R4,#+1
   \   0000000C   0x619C             STR      R4,[R3, #+24]
    287          		}
    288          		//str_pending_ = 1;
    289          		stradio_pending_len_ = length;
   \                     ??sendPriorityPacket_0: (+1)
   \   0000000E   0x7018             STRB     R0,[R3, #+0]
    290          		stradio_pending_data_ = data;
   \   00000010   0x60D9             STR      R1,[R3, #+12]
    291          		stradio_pending_dst_ = dst;
   \   00000012   0x811A             STRH     R2,[R3, #+8]
    292          	}
    293          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    294          

   \                                 In section .bss, align 4
    295          uint32_t stradio_count_tx_timeouts_=0;
   \                     stradio_count_tx_timeouts_:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
    296          void hPacketTimeout(uint8_t* tidx)
    297          {
   \                     hPacketTimeout: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    298          	ATOMIC(
    299          	if (FALSE == txComplete)
    300          	{
    301          #ifdef _ENABLE_APP_MOD_
    302          			app_drop_pkt ( pkt_to_sent_id, MODULE_PHY, REASON_RADIO_FAILURE, EVENT_DSEND );
    303          #endif // _ENABLE_APP_MOD_
    304          		// drop packet if not routable
    305          		release_pkt_in_tx();
    306          		sent_DATA_ = 0;
    307          		// Not needed since it is cleared imediatelly after TX ??
    308          		//stradio_pending_len_ = 0;
    309          		txComplete = TRUE;
    310          	}
    311          	)
   \   00000002   0xF3EF 0x8411      MRS      R4,BASEPRI
   \   00000006   0x2060             MOVS     R0,#+96
   \   00000008   0xF380 0x8811      MSR      BASEPRI,R0
   \   0000000C   0x....             LDR.N    R5,??DataTable5_3
   \   0000000E   0x7828             LDRB     R0,[R5, #+0]
   \   00000010   0xB968             CBNZ.N   R0,??hPacketTimeout_0
   \   00000012   0x....             LDR.N    R0,??DataTable5_6
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x2203             MOVS     R2,#+3
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x.... 0x....      BL       app_drop_pkt
   \   00000020   0x.... 0x....      BL       release_pkt_in_tx
   \   00000024   0x....             LDR.N    R1,??DataTable5_8
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x7008             STRB     R0,[R1, #+0]
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x7028             STRB     R0,[R5, #+0]
   \                     ??hPacketTimeout_0: (+1)
   \   0000002E   0xB2E4             UXTB     R4,R4
   \   00000030   0xF384 0x8811      MSR      BASEPRI,R4
    312          	stradio_count_tx_timeouts_++;
   \   00000034   0x....             LDR.N    R0,??DataTable5_11
   \   00000036   0x6801             LDR      R1,[R0, #+0]
   \   00000038   0x1C49             ADDS     R1,R1,#+1
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    313          }
   \   0000003C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    314          
    315          
    316          
    317          
    318          /*******************************************************************************
    319          * Function Name  : ST_RadioTransmitCompleteIsrCallback
    320          * Description    : Radio Transmit callback function
    321          * Input          : - status: status of the packet transmission
    322          *                  - sfdSentTime: MAC timer when the SFD was sent
    323          *                  - framePending: TRUE if the received ACK indicates that data
    324          *                    is pending for this node
    325          * Output         : None
    326          * Return         : None
    327          *******************************************************************************/
    328          /* ::ST_SUCCESS - the last byte of the non-ACK-request packet has been
    329           * transmitted.
    330           * ::ST_PHY_ACK_RECEIVED - the requested ACK was received.
    331           * ::ST_MAC_NO_ACK_RECEIVED - the requested ACK was not received in time.
    332           * ::ST_PHY_TX_CCA_FAIL - unable to transmit due to lack of clear channel on
    333           * all attempts.
    334           * ::ST_PHY_TX_UNDERFLOW - DMA underflow occurred while transmitting.  Should
    335           * never happen.
    336           * ::ST_PHY_TX_INCOMPLETE - The PLL synthesizer failed to lock while
    337           * transmitting.  Should never happen.
    338          */	
    339          

   \                                 In section .text, align 2, keep-with-next
    340          void ST_RadioTransmitCompleteIsrCallback(StStatus status,
    341          		uint32_t sfdSentTime,
    342          		boolean framePending)
    343          {
   \                     ST_RadioTransmitCompleteIsrCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    344          	tx_isr_count_++;
   \   00000002   0x....             LDR.N    R4,??DataTable5
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x6A20             LDR      R0,[R4, #+32]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x6220             STR      R0,[R4, #+32]
    345          	switch(status) {
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0xD009             BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_0
   \   00000010   0x2D40             CMP      R5,#+64
   \   00000012   0xD00F             BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_1
   \   00000014   0x2D8D             CMP      R5,#+141
   \   00000016   0xD009             BEQ.N    ??ST_RadioTransmitCompleteIsrCallback_2
   \   00000018   0x2D8F             CMP      R5,#+143
   \   0000001A   0xBF02             ITTT     EQ 
   \   0000001C   0x6B20             LDREQ    R0,[R4, #+48]
   \   0000001E   0x1C40             ADDEQ    R0,R0,#+1
   \   00000020   0x6320             STREQ    R0,[R4, #+48]
    346          	case ST_SUCCESS:
    347          //	  	if (MAC_BROADCAST == radio_dst)
    348          //			txComplete = TRUE;
    349          //		break;
    350          		count_succ_++;
    351          		break;
    352          	case ST_PHY_TX_CCA_FAIL:
    353          		count_cca_++;
    354          		break;
    355          	case ST_MAC_NO_ACK_RECEIVED:
    356          		count_nack_++;
    357          					//dbug_test++;
    358          		if (0 < stradio_resend_--)
    359          		{
    360          			count_resend_++;
    361          			stradio_retransmit_req_ = 1;
    362          			//ATOMIC (txComplete = TRUE;)
    363          					//dbug_test++;
    364          
    365          			return;
    366          		} // else -> drop packet -> done below
    367          		else
    368          		{
    369          			// Drop link -> should I check if the failures were all for the same link?
    370          			rtr_dropped_link(radio_dst);
    371          			//	if ( NUMQBUFFS >= pkt_to_sent_id)
    372          			//		rtr_dropped_link(STRADIO_GET_SRC_ADDR( ( (sint8_t*)&(buffer0[pkt_to_sent_id*SIZE_Q_BUFF]) ) ));
    373          		}
    374          					//dbug_test++;
    375          
    376          		break;
    377          	case ST_PHY_ACK_RECEIVED:
    378          		count_ack_++;
   \   00000022   0xE018             B.N      ??ST_RadioTransmitCompleteIsrCallback_3
   \                     ??ST_RadioTransmitCompleteIsrCallback_0: (+1)
   \   00000024   0x6A60             LDR      R0,[R4, #+36]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x6260             STR      R0,[R4, #+36]
   \   0000002A   0xE014             B.N      ??ST_RadioTransmitCompleteIsrCallback_3
   \                     ??ST_RadioTransmitCompleteIsrCallback_2: (+1)
   \   0000002C   0x6AA0             LDR      R0,[R4, #+40]
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x62A0             STR      R0,[R4, #+40]
   \   00000032   0xE010             B.N      ??ST_RadioTransmitCompleteIsrCallback_3
   \                     ??ST_RadioTransmitCompleteIsrCallback_1: (+1)
   \   00000034   0x6AE0             LDR      R0,[R4, #+44]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x62E0             STR      R0,[R4, #+44]
   \   0000003A   0x6B60             LDR      R0,[R4, #+52]
   \   0000003C   0x1E41             SUBS     R1,R0,#+1
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0x6361             STR      R1,[R4, #+52]
   \   00000042   0xDB05             BLT.N    ??ST_RadioTransmitCompleteIsrCallback_4
   \   00000044   0x6BA0             LDR      R0,[R4, #+56]
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0x63A0             STR      R0,[R4, #+56]
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x7120             STRB     R0,[R4, #+4]
   \   0000004E   0xBD31             POP      {R0,R4,R5,PC}
   \                     ??ST_RadioTransmitCompleteIsrCallback_4: (+1)
   \   00000050   0x88E0             LDRH     R0,[R4, #+6]
   \   00000052   0x.... 0x....      BL       rtr_dropped_link
    379          		break;
    380          	default:
    381          		break;
    382          	}
    383          
    384          	last_status_ = status;
   \                     ??ST_RadioTransmitCompleteIsrCallback_3: (+1)
   \   00000056   0x70A5             STRB     R5,[R4, #+2]
    385          	if (1==sent_DATA_)
   \   00000058   0x....             LDR.N    R5,??DataTable5_8
   \   0000005A   0x7828             LDRB     R0,[R5, #+0]
   \   0000005C   0x2801             CMP      R0,#+1
   \   0000005E   0xBF08             IT       EQ 
   \   00000060   0x.... 0x....      BLEQ     release_pkt_in_tx
    386          	{
    387          		release_pkt_in_tx(); // release packet that was sent
    388          	}
    389          	sent_DATA_ = 0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x7028             STRB     R0,[R5, #+0]
    390          	sch_remove_timeout(txTIDX, str_stradio_PktTO);
   \   00000068   0xF104 0x0144      ADD      R1,R4,#+68
   \   0000006C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000006E   0x.... 0x....      BL       sch_remove_timeout
    391          	txTIDX = SCH_NO_TIMEOUT_ID;
   \   00000072   0x20FF             MOVS     R0,#+255
   \   00000074   0x70E0             STRB     R0,[R4, #+3]
    392          	ATOMIC (txComplete = TRUE;)
   \   00000076   0x2160             MOVS     R1,#+96
   \   00000078   0xF3EF 0x8011      MRS      R0,BASEPRI
   \   0000007C   0xF381 0x8811      MSR      BASEPRI,R1
   \   00000080   0x....             LDR.N    R2,??DataTable5_3
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x7011             STRB     R1,[R2, #+0]
   \   00000086   0xB2C0             UXTB     R0,R0
   \   00000088   0xF380 0x8811      MSR      BASEPRI,R0
    393          }/* end ST_RadioTransmitCompleteIsrCallback() */
   \   0000008C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     stradio_pending_len_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     my_rf_channel_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     my_tx_power_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     txComplete

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     txPacket

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     pkt_to_sent_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     pkt_to_sent_id

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     buffer0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     sent_DATA_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     my_tx_timeout_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     phy_sent_timeout_

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     stradio_count_tx_timeouts_
    394          
    395          #endif // _ARM_

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   ST_RadioTransmitCompleteIsrCallback
        16   -> rtr_dropped_link
        16   -> sch_remove_timeout
      16   hPacketTimeout
        16   -> app_drop_pkt
        16   -> release_pkt_in_tx
      16   radio_init
        16   -> ST_RadioGetEui64
        16   -> ST_RadioSetChannel
        16   -> ST_RadioSetNodeId
        16   -> ST_RadioSetPanId
        16   -> ST_RadioSetPowerMode
        16   -> phy_set_power_level
         0   -> sch_add_loop
      24   radio_loop
        24   -> STM_EVAL_LEDOff
         0   -> STM_EVAL_LEDOn
        24   -> STM_EVAL_LEDOn
        24   -> ST_RadioTransmit
        24   -> app_drop_pkt
        24   -> get_dst_mac_base
        24   -> halCommonGetInt32uMillisecondTick
        24   -> que_deQpackets
        24   -> que_enQpacket
         0   -> release_pkt_in_tx
        24   -> routing_send_DATA_base
        24   -> sendPacketData
      24   sendPacketData
        24   -> ST_RadioTransmit
        24   -> halCommonGetInt32uMillisecondTick
        24   -> halCommonMemCopy
        24   -> sch_create_timeout
       8   sendPriorityPacket


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
     142  ST_RadioTransmitCompleteIsrCallback
      62  hPacketTimeout
      86  radio_init
     244  radio_loop
     170  sendPacketData
      22  sendPriorityPacket
       4  stradio_count_tx_timeouts_
      88  stradio_pending_len_
          my_addr8_
          last_status_
          txTIDX
          stradio_retransmit_req_
          result_1
          radio_dst
          stradio_pending_dst_
          my_addr16_
          stradio_pending_data_
          count_stalled
          stalled_reset
          stradio_count_ov_priority_
          tx_count_
          tx_isr_count_
          count_succ_
          count_cca_
          count_nack_
          count_ack_
          stradio_resend_
          count_resend_
          stradio_count_failed_retransmissions_
          stradio_retransmision_result
          str_stradio_PktTO
       1  stradio_power_

 
   4 bytes in section .bss
  89 bytes in section .data
 774 bytes in section .text
 
 774 bytes of CODE memory
  93 bytes of DATA memory

Errors: none
Warnings: none
