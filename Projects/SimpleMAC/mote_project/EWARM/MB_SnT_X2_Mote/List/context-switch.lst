###############################################################################
#                                                                             #
#     IAR Assembler V7.30.4.8167/W32 for ARM 21/Feb/2015  15:49:54            #
#     Copyright 1999-2014 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\context-switch.s79#
#           List file     =  C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\context-switch.lst#
#           Object file   =  C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\context-switch.o#
#           Command line  =  C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\context-switch.s79 #
#                            -OC:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\ #
#                            -s+ -M<> -w+ -r                                  #
#                            -LC:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\ #
#                            -t2 --cpu Cortex-M3 --fpu None                   #
#                                                                             #
###############################################################################

    1                           /**
    2                             ********************************************
                                **********************************
    3                             * @file    context-switch.s79
    4                             * @author  MCD Application Team
    5                             * @version V2.0.0
    6                             * @date    09-October-2012
    7                             * @brief   Context save/restore for deep
                                 sleep using the PendSV exception.
    8                             *
    9                             *  @verbatim
   10                             *
   11                             *
   12                               ==========================================
                                =================================
   13                                                    ##### How to use this
                                 driver #####
   14                               ==========================================
                                =================================
   15                                 [..]
   16                                  # This file also contains a simple
                                 halInternalIdleSleep() function that
   17                                    executes just the WFI instruction for
                                 idle sleeping.
   18                                
   19                                  # When the STM32W108XX enters deep
                                 sleep, the hardware will actually remove
                                 power
   20                                    from the Cortex-M3 core (in Deep
                                 Sleep 0, power is not removed but the
                                 core
   21                                    is held in reset).  Since this will
                                 clear the internal state of the core,
                                 it
   22                                    must be properly restored such that
                                 execution can resume from the sleep code.
   23                                    The simplest and most secure
                                 mechanism to do this is to perform a context
                                 save
   24                                    and restore.  Context save/restore is
                                 almost identical to a context switch
   25                                    used in multi-threaded systems with
                                 the main difference being only one stack
   26                                    pointer is used and the save/restore
                                 operations are disjoint.
   27                                
   28                                 # When an interrupt is triggered in the
                                 STM32W108XX, the core automatically saves
                                 8
   29                                   of the 16 CPU registers on the stack. 
                                 The ISR then only needs to save the
   30                                   other 8 registers and store the
                                 resulting stack pointer.  Restoring is
                                 the
   31                                   reverse operation where 8 registers
                                 are manually copied back with the other
                                 8
   32                                   being restored on the return from
                                 interrupt.
   33                                
   34                                 # As its last act, the deep sleep code
                                 will trigger the PendSV exception to
   35                                   perform a context save. When the core
                                 is booted upon deep sleep exit, the
   36                                   RESET_EVENT register informs cstartup
                                 if the chip just exited deep sleep.
   37                                   Cstartup will then trigger halTriggerC
                                ontextRestore which sets up the stack
   38                                   pointer and trigger the PendSV
                                 exception to perform a restore.  When
                                 PendSV
   39                                   returns from interrupt context the
                                 system will be back at the same point
                                 it
   40                                   was before deep sleep.
   41                                         
   42                               @endverbatim
   43                             ********************************************
                                **********************************
   44                             * @attention
   45                             *
   46                             * <h2><center>&copy; COPYRIGHT 2012
                                 STMicroelectronics</center></h2>
   47                             *
   48                             * Licensed under MCD-ST Liberty SW License
                                 Agreement V2, (the "License");
   49                             * You may not use this file except in
                                 compliance with the License.
   50                             * You may obtain a copy of the License
                                 at:
   51                             *
   52                             *        http://www.st.com/software_license_
                                agreement_liberty_v2
   53                             *
   54                             * Unless required by applicable law or
                                 agreed to in writing, software 
   55                             * distributed under the License is
                                 distributed on an "AS IS" BASIS, 
   56                             * WITHOUT WARRANTIES OR CONDITIONS OF ANY
                                 KIND, either express or implied.
   57                             * See the License for the specific language
                                 governing permissions and
   58                             * limitations under the License.
   59                             *
   60                             ********************************************
                                **********************************  
   61                             */
   62                           
   63                           /* Includes ----------------------------------
                                --------------------------------*/
   64                           #include "compiler/asm.h"
   65                           
   66                           /**
   67                             * @name boolean halPendSvSaveContext
   68                             * @brief A simple boolean flag used to
                                 indicate if a context save or a context
                                 restore
   69                             * should be performed.  Since context
                                 switching is handled with the PendSV
   70                             * interrupt, parameters cannot be passed
                                 into the ISR and as such this boolean
   71                             * flag is used. If this flag is zero, PendSV
                                 should perform a context restore.
   72                             * If this flag is non-zero, PendSV should
                                 perform a context save.
   73                             * @param None.
   74                             * @retval None.
   75                             * @note The smallest unit of storage is a
                                 single byte.
   76                             */
   77                           
   78                                   __BSS__
   79                                   __EXPORT__ halPendSvSaveContext
   80                           halPendSvSaveContext:
   81                                   __SPACE__ 1
   82                           
   83                           /**
   84                             * @name uint32_t savedMSP
   85                             * @brief Private storage to hold the saved
                                 stack pointer.  This variable is only
                                 used
   86                             * in this file and should not be extern'ed. 
                                 In our current design we
   87                             * do not use real context switching, but
                                 only context saving and restoring.
   88                             * As such, we only need to keep track of the
                                 Main Stack Pointer (MSP). This
   89                             * variable is used to hold the MSP between a
                                 save and a restore.
   90                             * @param None.
   91                             * @retval None.
   92                             */
   93                                   __BSS__
   94                                   __EXPORT__ savedMSP
   95                           savedMSP:
   96                                   __SPACE__ 4
   97                           
   98                           /**
   99                             * @name void halPendSvIsr(void)
  100                             * @brief This ISR is installed by cstartup
                                 in the vector table for the PendSV
  101                             * exception.  The purpose of this ISR is to
                                 either save the current context
  102                             * and trigger sleeping through the 'WFI'
                                 instruction, or restore a
  103                             * previous context.  The variable halPendSvS
                                aveContext is used to
  104                             * decide if a save or a restore is
                                 performed.  Since entering/exiting interrupt
  105                             * context automatically saves/restores 8 of
                                 the 16 CPU registers on the stack
  106                             * we need to manually save the other 8 onto
                                 the stack as well.
  107                             * When a context save is complete, the stack
                                 will have been expanded by 16
  108                             * words with the current Stack Pointer
                                 stored in savedMSP.
  109                             * When a context restore is complete, the
                                 stack will have been shrunk by 16
  110                             * words with the old context restored after
                                 the return instruction.
  111                             * @param None.
  112                             * @retval None.
  113                             * @note The IAR default handler name for
                                 PendSV, PendSV_Handler, is also
  114                             * instantiated here so it routes to the same
                                 code as the St name halPendSvIsr.
  115                             */
  116                                   __CODE__
  117                                   __THUMB__
  118                                   __EXPORT__ halPendSvIsr
  119                           halPendSvIsr:
  120    00000000 0B48                  LDR  R0, =halPendSvSaveContext  //load
                                                   the variable's address
  121    00000002 0078                  LDRB R0, [R0]           //get the value
                                              in the variable
  122    00000004 50B1                  CBZ  R0, contextRestore //if variable
                                                   is zero, branch to
                                                   contextRestore
  123                           contextSave:
  124    00000006 EFF30880              MRS  R0, MSP          //load the main
                                              stack pointer into R0
  125    0000000A A0F12000              SUB  R0, R0, #0x20    //make room on
                                              the stack for 8 words (32
                                              bytes)
  126    0000000E 80F30888              MSR  MSP, R0          //load new MSP
                                              from adjusted stack pointer
  127    00000012 80E8F00F              STM  R0, {R4-R11}     //store R4-R11 (8
                                              words) onto the stack
  128    00000016 0749                  LDR  R1, =savedMSP    //load address of
                                                   savedMSP into R1
  129    00000018 0860                  STR  R0, [R1]         //store the MSP
                                              into savedMSP
  130    0000001A 30BF                  WFI                   //all saved,
                                                               trigger deep
                                                               sleep
  131                                   // Even if we fall through the WFI
                                 instruction, we will immediately
  132                                   // execute a context restore and end
                                 up where we left off with no
  133                                   // ill effects.  Normally at this
                                 point the core will either be
  134                                   // powered off or reset (depending on
                                 the deep sleep level).
  135                           contextRestore:
  136    0000001C 0548                  LDR  R0, =savedMSP    //load address of
                                                   savedMSP into R0
  137    0000001E 0068                  LDR  R0, [R0]         //load the MSP
                                              from savedMSP
  138    00000020 90E8F00F              LDM  R0, {R4-R11}     //load R4-R11 (8
                                              words) from the stack
  139    00000024 00F12000              ADD  R0, R0, #0x20    //eliminate the 8
                                              words (32 bytes) from the
                                              stack
  140    00000028 80F30888              MSR  MSP, R0          //restore the MSP
                                              from R0
  141    0000002C 7047                  BX   LR               //return to the
                                              old context
  142                                   
  143                           /**
  144                             * @name void halTriggerContextRestore(void)
  145                             * @brief Cstartup is responsible for
                                 triggering a context restore based upon
                                 the
  146                             * RESET_EVENT register.  Since the stack
                                 pointer sits at the top of memory
  147                             * after the core boots, cstartup cannot
                                 simply trigger a PendSV to restore
  148                             * context as this will cause existing stack
                                 data to be over written.  Cstartup
  149                             * disables interrupts, pends PendSV, and
                                 then calls this function. This
  150                             * function simply configures the Stack
                                 Pointer to be past the previous data
  151                             * such that when interrupts are enabled and
                                 PendSV fires it wont corrupt
  152                             * previous data.
  153                             * @param None.
  154                             * @retval None.
  155                             */
  155.1                                  TABLE
  155.2  00000030 ........              Reference on line 120
  155.3  00000034 ........              Reference on line 128,136
  156                                   __CODE__
  157                                   __THUMB__
  158                                   __EXPORT__ halTriggerContextRestore
  159                           halTriggerContextRestore:
  160    00000000 0248                  LDR   R0, =savedMSP    //load address
                                                    of savedMSP into R0
  161    00000002 0068                  LDR   R0, [R0]         //load the MSP
                                               from savedMSP
  162    00000004 80F30888              MSR   MSP, R0          //restore the
                                               MSP from R0
  163    00000008 62B6                  CPSIE i                //enable
                                               interrupts and let PendSV
                                               fire
  164    0000000A 7047                  BX    LR               //this return
                                               should never be triggered
  165                                   
  166                           /**
  167                             * @name void halInternalIdleSleep(void)
  168                             * @brief A simple internal function call (to
                                 be called from halSleep) for executing
  169                             * the WFI instruction and entering the
                                 simple, idle sleep state.
  170                             * The NOP before and after the WFI are
                                 necessary due to an issue where
  171                             * lowest idle current is not obtained if the
                                 execution chain is BL > WFI > BX
  172                             * and the WFI instruction exists at an
                                 address that ends with 0x0, 0x2, 0x8,
  173                             * or 0xA (for these addresses, ignore the
                                 least significant bit since that is
  174                             * the T-Bit and must be set on Cortex-M3
                                 CPUs).  See case 11768.
  175                             * @param None.
  176                             * @retval None.
  177                             */
  177.1                                  TABLE
  177.2  0000000C ........              Reference on line 160
  178                                   __CODE__
  179                                   __THUMB__
  180                                   __EXPORT__ halInternalIdleSleep
  181                           halInternalIdleSleep:
  182    00000000 00BF                  NOP
  183    00000002 30BF                  WFI                    //trigger idle
                                                                sleep
  184    00000004 00BF                  NOP
  185    00000006 7047                  BX   LR                //return
  186                                   
  187                                   __END__
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 85          #
##############################



