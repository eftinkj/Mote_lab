###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:26:00
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\APP_TEMP_1WIRE\app_temp_1wire_main.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\APP_TEMP_1WIRE\app_temp_1wire_main.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"app_temp_1wire_main.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\APP_TEMP_1WIRE\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\app_temp_1wire_main.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\app_temp_1wire_main.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\APP_TEMP_1WIRE\app_temp_1wire_main.c
      1          
      2          
      3          #include "HW_LIB/OneWire.h"
      4          #include "app_temp_1wire_main.h"
      5          #include "FEAT_Scheduler/sch_basic_pub.h"
      6          
      7          extern void app_temp_lcd_disp(uint8_t * context);
      8          
      9          OWire OneWire;
     10          unsigned char addr[8] = {0x28, 0xEC, 0x21, 0xEA, 0x03, 0x00, 0x00, 0xC9};
     11          unsigned int DSState = 0;
     12          
     13          unsigned char data[2];

   \                                 In section .bss, align 4
     14          float Ta = 0.0;
   \                     Ta:
   \   00000000                      DS8 4
     15          
     16          #define TEMP_LCD_INTERVAL 1000
     17          
     18          uint8_t lcd_timeout = SCH_NO_TIMEOUT_ID;
     19          uint8_t temp_sensor_timeout = SCH_NO_TIMEOUT_ID;
     20          int32_t temp_cC = 0; // Temperature in centy-Celcius (0.01 C per unit)
     21          
     22          char temp_task_name[]="TEMP";
     23          char lcd_task_name[]="LCD";
     24          
     25          /*******************************************************************************
     26          * Function Name  : app_temp_1wire_init.
     27          * Description    : Initializes OneWire interface and setups periodic temperature
     28          *					readings.
     29          * Input          : None
     30          * Output         : None
     31          * Return         : None
     32          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     33          void app_temp_1wire_init()
     34          {
   \                     app_temp_1wire_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     35            OWInit(&OneWire, GPIOC, GPIO_Pin_7);
   \   00000002   0x....             LDR.N    R4,??DataTable13_6
   \   00000004   0x....             LDR.N    R1,??DataTable13_7  ;; 0x4000b800
   \   00000006   0x2280             MOVS     R2,#+128
   \   00000008   0xF104 0x0010      ADD      R0,R4,#+16
   \   0000000C   0x.... 0x....      BL       OWInit
     36            
     37            OWSearch(&OneWire, addr);
   \   00000010   0xF104 0x0134      ADD      R1,R4,#+52
   \   00000014   0xF104 0x0010      ADD      R0,R4,#+16
   \   00000018   0x.... 0x....      BL       OWSearch
     38            /*sprintf(test, "%02X %02X %02X %02X %02X %02X %02X %02X",
     39            addr[7],addr[6],
     40            addr[5],addr[4],
     41            addr[3],addr[2],
     42            addr[1],addr[0]);
     43            ST7565_drawstring(6, 6, test);
     44            */
     45            
     46            //sch_add_loop(app_temp_1wire_loop); 
     47            lcd_timeout = sch_create_timeout( rtc_get_ticks()+TEMP_LCD_INTERVAL, app_temp_lcd_disp, (uint8_t*) 0, lcd_task_name);
   \   0000001C   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000020   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000024   0x70A0             STRB     R0,[R4, #+2]
     48            temp_sensor_timeout = sch_create_timeout( rtc_get_ticks()+TEMP_LCD_INTERVAL*2, app_temp_1wire_loop, (uint8_t*) 0, temp_task_name);
   \   00000026   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000002A   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000002E   0x70E0             STRB     R0,[R4, #+3]
     49          
     50          }
   \   00000030   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xF104 0x033C      ADD      R3,R4,#+60
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable13_8
   \   00000008   0xF500 0x60FA      ADD      R0,R0,#+2000
   \   0000000C   0x.... 0x....      B.W      sch_create_timeout

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xF104 0x0344      ADD      R3,R4,#+68
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable13_9
   \   00000008   0xF500 0x707A      ADD      R0,R0,#+1000
   \   0000000C   0x.... 0x....      B.W      sch_create_timeout
     51          
     52          
     53          
     54          /*******************************************************************************
     55          * Function Name  : app_temp_1wire_loop
     56          * Description    : Reads the temperature in two stages (conversion + read)
     57          * Input          : None
     58          * Output         : None
     59          * Return         : None
     60          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     61          void app_temp_1wire_loop(uint8_t *context) //__align(8)
     62          {
   \                     app_temp_1wire_loop: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     63            
     64            //onewire
     65            switch (DSState){
   \   00000002   0x....             LDR.N    R4,??DataTable13_6
   \   00000004   0x6860             LDR      R0,[R4, #+4]
   \   00000006   0xB110             CBZ.N    R0,??app_temp_1wire_loop_0
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD00C             BEQ.N    ??app_temp_1wire_loop_1
   \   0000000C   0xE02A             B.N      ??app_temp_1wire_loop_2
     66            case 0:
     67          	OWReset(&OneWire);
   \                     ??app_temp_1wire_loop_0: (+1)
   \   0000000E   0xF104 0x0010      ADD      R0,R4,#+16
   \   00000012   0x.... 0x....      BL       OWReset
     68          	OWWrite(&OneWire, 0xCC); // skip ROM
   \   00000016   0x.... 0x....      BL       ?Subroutine2
     69          	OWWrite(&OneWire, 0x44); // start conversion
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000001A   0x2144             MOVS     R1,#+68
   \   0000001C   0x.... 0x....      BL       ??Subroutine2_0
     70          	//DSTimer = millis();
     71          	DSState++;
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000020   0x6860             LDR      R0,[R4, #+4]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0xE01D             B.N      ??app_temp_1wire_loop_3
     72          	break;
     73            case 1:
     74          	//if((millis() - DSTimer) >= 1000){
     75          	  OWReset(&OneWire);
   \                     ??app_temp_1wire_loop_1: (+1)
   \   00000026   0xF104 0x0010      ADD      R0,R4,#+16
   \   0000002A   0x.... 0x....      BL       OWReset
     76          	  //OWSelect(&OneWire, addr);
     77          		OWWrite(&OneWire, 0xCC); // skip ROM
   \   0000002E   0x.... 0x....      BL       ?Subroutine2
     78          	  OWWrite(&OneWire, 0xBE); // Read Scratchpad
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000032   0x21BE             MOVS     R1,#+190
   \   00000034   0x.... 0x....      BL       ??Subroutine2_0
     79          	  data[0] = OWRead(&OneWire);
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000038   0xF104 0x0010      ADD      R0,R4,#+16
   \   0000003C   0x.... 0x....      BL       OWRead
   \   00000040   0x7020             STRB     R0,[R4, #+0]
     80          	  data[1] = OWRead(&OneWire);
   \   00000042   0xF104 0x0010      ADD      R0,R4,#+16
   \   00000046   0x.... 0x....      BL       OWRead
   \   0000004A   0x7060             STRB     R0,[R4, #+1]
     81          	  temp_cC = (((data[1] << 8) | data[0] )*100) / 16;
   \   0000004C   0x7821             LDRB     R1,[R4, #+0]
   \   0000004E   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
   \   00000052   0x2164             MOVS     R1,#+100
   \   00000054   0x4348             MULS     R0,R1,R0
   \   00000056   0x10C1             ASRS     R1,R0,#+3
   \   00000058   0xEB00 0x7011      ADD      R0,R0,R1, LSR #+28
   \   0000005C   0x1100             ASRS     R0,R0,#+4
   \   0000005E   0x60A0             STR      R0,[R4, #+8]
     82          	//  int32_t total_100=((((data[1] << 8) | data[0] )*10*9) / 8) ;//+ 3200;
     83          	//	int32_t i=(total_100/100)+32;
     84          	//	int32_t f=total_100%100;
     85          		//i+=32;
     86          	  DSState = 0;
   \   00000060   0x2000             MOVS     R0,#+0
   \                     ??app_temp_1wire_loop_3: (+1)
   \   00000062   0x6060             STR      R0,[R4, #+4]
     87          	//}
     88          	break;
     89            }
     90              temp_sensor_timeout = sch_create_timeout( rtc_get_ticks()+TEMP_LCD_INTERVAL*2, app_temp_1wire_loop, (uint8_t*) 0, temp_task_name);
   \                     ??app_temp_1wire_loop_2: (+1)
   \   00000064   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000068   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2: (+1)
   \   0000006C   0x70E0             STRB     R0,[R4, #+3]
     91          	if ( SCH_NO_TIMEOUT_ID == lcd_timeout ) printf( "TEMP timer out %l\n", rtc_get_ticks() );
                 	                                                                       ^
Warning[Pe226]: invalid format string conversion
   \   0000006E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000070   0x28FF             CMP      R0,#+255
   \   00000072   0xD108             BNE.N    ??app_temp_1wire_loop_4
   \   00000074   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000078   0xE8BD 0x4010      POP      {R4,LR}
   \   0000007C   0x4601             MOV      R1,R0
   \   0000007E   0x.... 0x....      ADR.W    R0,?_0
   \   00000082   0x.... 0x....      B.W      printf
     92          }
   \                     ??app_temp_1wire_loop_4: (+1)
   \   00000086   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x21CC             MOVS     R1,#+204
   \                     ??Subroutine2_0: (+1)
   \   00000002   0xF104 0x0010      ADD      R0,R4,#+16
   \   00000006   0x.... 0x....      B.W      OWWrite

   \                                 In section .data, align 4
   \                     `data`:
   \   00000000   0x00 0x00          DC8 0, 0
   \                     lcd_timeout:
   \   00000002   0xFF               DC8 255
   \                     temp_sensor_timeout:
   \   00000003   0xFF               DC8 255
   \                     DSState:
   \   00000004   0x00000000         DC32 0
   \                     temp_cC:
   \   00000008   0x00000000         DC32 0
     93          
     94          
     95          
     96          int lcd_count = 0;
   \                     lcd_count:
   \   0000000C   0x00000000         DC32 0
   \                     OneWire:
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     addr:
   \   00000034   0x28 0xEC          DC8 40, 236, 33, 234, 3, 0, 0, 201
   \              0x21 0xEA    
   \              0x03 0x00    
   \              0x00 0xC9    
   \                     temp_task_name:
   \   0000003C   0x54 0x45          DC8 "TEMP"
   \              0x4D 0x50    
   \              0x00         
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \                     lcd_task_name:
   \   00000044   0x4C 0x43          DC8 "LCD"
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
     97          void app_temp_lcd_disp(uint8_t * context)
     98          {	
   \                     app_temp_lcd_disp: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
     99          	char buf[15];
    100          	int32_t total_100 = (temp_cC * 9)/5 ;//+ 3200;
   \   00000002   0x....             LDR.N    R4,??DataTable13_6
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0xEB00 0x00C0      ADD      R0,R0,R0, LSL #+3
   \   0000000A   0x2105             MOVS     R1,#+5
   \   0000000C   0xFB90 0xF0F1      SDIV     R0,R0,R1
    101          	int32_t i=(total_100/100)+32;
    102          	int32_t f=total_100%100;
    103          		//i+=32;
    104          	sprintf(buf, "%d.%d", i, f);
   \   00000010   0x2164             MOVS     R1,#+100
   \   00000012   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   00000016   0x2264             MOVS     R2,#+100
   \   00000018   0xFB02 0x0311      MLS      R3,R2,R1,R0
   \   0000001C   0xF101 0x0220      ADD      R2,R1,#+32
   \   00000020   0x.... 0x....      ADR.W    R1,?_1
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0x.... 0x....      BL       sprintf
    105          	//sfprintf(buf, "%f", __align(8) Ta);
    106            	lcd_setCursor ( 0 , 0 ) ;
                   	^
Warning[Pe223]: function "lcd_setCursor" declared implicitly
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       lcd_setCursor
    107          	switch (lcd_count++)
   \   00000032   0x68E0             LDR      R0,[R4, #+12]
   \   00000034   0x1C41             ADDS     R1,R0,#+1
   \   00000036   0x2805             CMP      R0,#+5
   \   00000038   0x60E1             STR      R1,[R4, #+12]
   \   0000003A   0xD815             BHI.N    ??app_temp_lcd_disp_1
   \   0000003C   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??app_temp_lcd_disp_0:
   \   00000040   0x03 0x05          DC8      0x3,0x5,0x7,0x9
   \              0x07 0x09    
   \   00000044   0x0B 0x0F          DC8      0xB,0xF
    108          	{
    109          		case 0: lcd_printStr ( "0F=" ) ; break;
                 		        ^
Warning[Pe223]: function "lcd_printStr" declared implicitly
   \                     ??app_temp_lcd_disp_2: (+1)
   \   00000046   0x....             ADR.N    R0,??DataTable13  ;; "0F="
   \   00000048   0xE006             B.N      ??app_temp_lcd_disp_3
    110          		case 1: lcd_printStr ( "1F=" ) ; break;
   \                     ??app_temp_lcd_disp_4: (+1)
   \   0000004A   0x....             ADR.N    R0,??DataTable13_1  ;; "1F="
   \   0000004C   0xE004             B.N      ??app_temp_lcd_disp_3
    111          		case 2: lcd_printStr ( "2F=" ) ; break;
   \                     ??app_temp_lcd_disp_5: (+1)
   \   0000004E   0x....             ADR.N    R0,??DataTable13_2  ;; "2F="
   \   00000050   0xE002             B.N      ??app_temp_lcd_disp_3
    112          		case 3: lcd_printStr ( "3F=" ) ; break;
   \                     ??app_temp_lcd_disp_6: (+1)
   \   00000052   0x....             ADR.N    R0,??DataTable13_3  ;; "3F="
   \   00000054   0xE000             B.N      ??app_temp_lcd_disp_3
    113          		case 4: lcd_printStr ( "4F=" ) ; break;
   \                     ??app_temp_lcd_disp_7: (+1)
   \   00000056   0x....             ADR.N    R0,??DataTable13_4  ;; "4F="
   \                     ??app_temp_lcd_disp_3: (+1)
   \   00000058   0x.... 0x....      BL       lcd_printStr
   \   0000005C   0xE004             B.N      ??app_temp_lcd_disp_1
    114          		case 5: lcd_printStr ( "5F=" ) ; lcd_count=0; break;
   \                     ??app_temp_lcd_disp_8: (+1)
   \   0000005E   0x....             ADR.N    R0,??DataTable13_5  ;; "5F="
   \   00000060   0x.... 0x....      BL       lcd_printStr
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x60E0             STR      R0,[R4, #+12]
    115          	}
    116          	lcd_printStr ( buf ) ;
                 	^
Warning[Pe223]: function "lcd_printStr" declared implicitly
   \                     ??app_temp_lcd_disp_1: (+1)
   \   00000068   0xA800             ADD      R0,SP,#+0
   \   0000006A   0x.... 0x....      BL       lcd_printStr
    117          	lcd_timeout = sch_create_timeout( rtc_get_ticks()+TEMP_LCD_INTERVAL, app_temp_lcd_disp, (uint8_t*) 0, lcd_task_name);
   \   0000006E   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000072   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000076   0x70A0             STRB     R0,[R4, #+2]
    118          	if (SCH_NO_TIMEOUT_ID == temp_sensor_timeout) printf("LCD timer OUT %l\n", rtc_get_ticks());
                 	                                                                           ^
Warning[Pe226]: invalid format string conversion
   \   00000078   0x78E0             LDRB     R0,[R4, #+3]
   \   0000007A   0x28FF             CMP      R0,#+255
   \   0000007C   0xD106             BNE.N    ??app_temp_lcd_disp_9
   \   0000007E   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000082   0x4601             MOV      R1,R0
   \   00000084   0x.... 0x....      ADR.W    R0,?_8
   \   00000088   0x.... 0x....      BL       printf
    119          }
   \                     ??app_temp_lcd_disp_9: (+1)
   \   0000008C   0xBD1F             POP      {R0-R4,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x30 0x46          DC8      "0F="
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x31 0x46          DC8      "1F="
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x32 0x46          DC8      "2F="
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x33 0x46          DC8      "3F="
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x34 0x46          DC8      "4F="
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x35 0x46          DC8      "5F="
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     `data`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x4000B800         DC32     0x4000b800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     app_temp_1wire_loop

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     app_temp_lcd_disp

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x30 0x46          DC8 "0F="
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x31 0x46          DC8 "1F="
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x32 0x46          DC8 "2F="
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x33 0x46          DC8 "3F="
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x34 0x46          DC8 "4F="
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x35 0x46          DC8 "5F="
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x54 0x45          DC8 "TEMP timer out %l\012"
   \              0x4D 0x50    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x20 0x25    
   \              0x6C 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x25 0x64          DC8 "%d.%d"
   \              0x2E 0x25    
   \              0x64 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x4C 0x43          DC8 "LCD timer OUT %l\012"
   \              0x44 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x72 0x20    
   \              0x4F 0x55    
   \              0x54 0x20    
   \              0x25 0x6C    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   app_temp_1wire_init
         8   -> OWInit
         8   -> OWSearch
         8   -> halCommonGetInt32uMillisecondTick
         8   -> sch_create_timeout
       8   app_temp_1wire_loop
         8   -> OWRead
         8   -> OWReset
         8   -> OWWrite
         8   -> halCommonGetInt32uMillisecondTick
         0   -> printf
         8   -> sch_create_timeout
      24   app_temp_lcd_disp
        24   -> halCommonGetInt32uMillisecondTick
        24   -> lcd_printStr
        24   -> lcd_setCursor
        24   -> printf
        24   -> sch_create_timeout
        24   -> sprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
      16  ?Subroutine0
      16  ?Subroutine1
      10  ?Subroutine2
      20  ?_0
       8  ?_1
       4  ?_2
       4  ?_3
       4  ?_4
       4  ?_5
       4  ?_6
       4  ?_7
      20  ?_8
       4  Ta
      50  app_temp_1wire_init
     136  app_temp_1wire_loop
     142  app_temp_lcd_disp
      72  data
          lcd_timeout
          temp_sensor_timeout
          DSState
          temp_cC
          lcd_count
          OneWire
          addr
          temp_task_name
          lcd_task_name

 
   4 bytes in section .bss
  72 bytes in section .data
  24 bytes in section .rodata
 458 bytes in section .text
 
 458 bytes of CODE  memory
  24 bytes of CONST memory
  76 bytes of DATA  memory

Errors: none
Warnings: 5
