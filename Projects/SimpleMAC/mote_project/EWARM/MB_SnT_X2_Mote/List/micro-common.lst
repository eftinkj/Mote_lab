###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:27:27
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\micro-common.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\micro-common.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"micro-common.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\micro-common.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\micro-common.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\micro-common.c
      1          /**
      2            ******************************************************************************
      3            * @file    micro-common.c 
      4            * @author  MCD Application Team
      5            * @version V2.0.1
      6            * @date    30-November-2012 
      7            * @brief   STM32W108 micro-common specific minimal HAL functions common to
      8            *          full and minimal hal
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     13            *
     14            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     15            * You may not use this file except in compliance with the License.
     16            * You may obtain a copy of the License at:
     17            *
     18            *        http://www.st.com/software_license_agreement_liberty_v2
     19            *
     20            * Unless required by applicable law or agreed to in writing, software 
     21            * distributed under the License is distributed on an "AS IS" BASIS, 
     22            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     23            * See the License for the specific language governing permissions and
     24            * limitations under the License.
     25            *
     26            ******************************************************************************
     27            */
     28          
     29          /* Includes ------------------------------------------------------------------*/
     30          
     31          #include PLATFORM_HEADER
     32          #include "board.h"
     33          #include "error.h"
     34          #include "micro-common.h"
     35          
     36          /** @addtogroup HAL
     37            * @{
     38            */
     39          
     40          /** @defgroup micro common
     41            * @brief micro common modules
     42            * @{
     43            */
     44          
     45          /* Private define ------------------------------------------------------------*/
     46          /* Private typedef -----------------------------------------------------------*/
     47          /* Private macros ------------------------------------------------------------*/
     48          /* Private variables ---------------------------------------------------------*/
     49          /* Private function prototypes -----------------------------------------------*/
     50          /* Private functions ---------------------------------------------------------*/
     51          
     52          /** @defgroup  micro-common_Private_Functions
     53            * @{
     54            */
     55          
     56          /**
     57            * @brief  Configure an IO pin's operating mode
     58            * @param  io  The io pin to use, can be specified with the convenience macros
     59            *         PORTA_PIN(), PORTB_PIN(), PORTC_PIN()
     60            * @param  config   The configuration mode to use.
     61            * @retval None
     62            */

   \                                 In section .text, align 2, keep-with-next
     63          void halGpioConfig(uint32_t io, uint32_t config)
     64          {
   \                     halGpioConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      ADR.W    R2,??configRegs
   \   00000006   0x0883             LSRS     R3,R0,#+2
   \   00000008   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   0000000C   0x6813             LDR      R3,[R2, #+0]
     65            static __IO uint32_t *const configRegs[] = 
     66              { (__IO uint32_t *)GPIOA_BASE,
     67                (__IO uint32_t *)(GPIOA_BASE + 4),
     68                (__IO uint32_t *)GPIOB_BASE,
     69                (__IO uint32_t *)(GPIOB_BASE + 4),
     70                (__IO uint32_t *)GPIOC_BASE,
     71                (__IO uint32_t *)(GPIOC_BASE + 4) };
     72            uint32_t portcfg;
     73            portcfg = *configRegs[io/4];                /* get current config */                   
     74            portcfg = portcfg & ~((0xF)<<((io&3)*4));   /* mask out config of this pin */
     75            *configRegs[io/4] = portcfg | (config <<((io&3)*4));
   \   0000000E   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000012   0x0080             LSLS     R0,R0,#+2
   \   00000014   0x240F             MOVS     R4,#+15
   \   00000016   0x4084             LSLS     R4,R4,R0
   \   00000018   0x43A3             BICS     R3,R3,R4
   \   0000001A   0xFA01 0xF000      LSL      R0,R1,R0
   \   0000001E   0x4318             ORRS     R0,R0,R3
   \   00000020   0x6010             STR      R0,[R2, #+0]
     76          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??configRegs:
   \   00000000   0x4000B000         DC32 4000B000H, 4000B004H, 4000B400H, 4000B404H, 4000B800H, 4000B804H
   \              0x4000B004   
   \              0x4000B400   
   \              0x4000B404   
   \              0x4000B800   
   \              0x4000B804   
     77          
     78          /**
     79            * @brief  Set/Clear single GPIO bit
     80            * @param  io  The io pin to use, can be specified with the convenience macros
     81            *         PORTA_PIN(), PORTB_PIN(), PORTC_PIN()
     82            * @param  value   A flag indicating whether to set or clear the io.
     83            * @retval None
     84            */

   \                                 In section .text, align 2, keep-with-next
     85          void halGpioSet(uint32_t gpio, boolean value)
     86          {
     87            if(gpio/8 < 3) {
   \                     halGpioSet: (+1)
   \   00000000   0x08C2             LSRS     R2,R0,#+3
   \   00000002   0x2A03             CMP      R2,#+3
   \   00000004   0xD20A             BCS.N    ??halGpioSet_0
     88              if (value) {
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x0292             LSLS     R2,R2,#+10
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xF000 0x0007      AND      R0,R0,#0x7
   \   00000010   0xBF14             ITE      NE 
   \   00000012   0x....             LDRNE.N  R1,??DataTable2  ;; 0x4000b010
   \   00000014   0x....             LDREQ.N  R1,??DataTable2_1  ;; 0x4000b014
   \   00000016   0xFA03 0xF000      LSL      R0,R3,R0
     89                *((__IO uint32_t *)(GPIO_PxSET_BASE+(GPIO_Px_OFFSET*(gpio/8)))) = BIT(gpio&7);
     90              } else {
     91                *((__IO uint32_t *)(GPIO_PxCLR_BASE+(GPIO_Px_OFFSET*(gpio/8)))) = BIT(gpio&7);
   \   0000001A   0x5088             STR      R0,[R1, R2]
     92              }
     93            }
     94          }
   \                     ??halGpioSet_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
     95          
     96          /**
     97            * @brief  Starts system timer 
     98            * @param  None
     99            * @retval Return unsigned value
    100            */

   \                                 In section .text, align 2, keep-with-next
    101          uint16_t halInternalStartSystemTimer(void)
    102          {
   \                     halInternalStartSystemTimer: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    103            /* Since the SleepTMR is the only timer maintained during deep sleep, it is
    104             * used as the System Timer (RTC).  We maintain a 32 bit hardware timer
    105             * configured for a tick value time of 1024 ticks/second (0.9765625 ms/tick)
    106             * using either the 10 kHz internal SlowRC clock divided and calibrated to
    107             * 1024 Hz or the external 32.768 kHz crystal divided to 1024 Hz.
    108             * With a tick time of ~1ms, this 32bit timer will wrap after ~48.5 days. */
    109            
    110            /* disable top-level interrupt while configuring */
    111            NVIC->ICER[0] = NVIC_IxxR_SLEEPTMR;
   \   00000002   0x....             LDR.N    R1,??DataTable2_2  ;; 0xe000e180
   \   00000004   0x2010             MOVS     R0,#+16
   \   00000006   0x6008             STR      R0,[R1, #+0]
    112            
    113          #ifdef ENABLE_OSC32K
    114              #ifdef DIGITAL_OSC32_EXT
    115                /* Disable both OSC32K and SLOWRC if using external digital clock input */
    116                CLK->SLEEPCR = 0;
    117              #else /*!DIGITAL_OSC32_EXT */
    118                /* Enable the 32kHz XTAL (and disable SlowRC since it is not needed) */
    119                CLK->SLEEPCR = CLK_SLEEPCR_LSEEN;
    120              #endif
    121              /* Sleep timer configuration is the same for crystal and external clock */
    122              SLPTMR->CR = (SLPTMR_CR_EN            | /* enable TMR */
    123                             (0 << 10)| /* TMR not paused when halted */
    124                             (5 << 4)  | /* divide down to 1024Hz */
    125                             (1 << 0)) ; /* select XTAL */
    126            #else /* !ENABLE_OSC32K */
    127              /* Enable the SlowRC (and disable 32kHz XTAL since it is not needed) */
    128              CLK->SLEEPCR = CLK_SLEEPCR_LSI10KEN;
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x....             LDR.N    R1,??DataTable2_3  ;; 0x40000008
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    129              SLPTMR->CR = (SLPTMR_CR_EN            | /* enable TMR */
    130                             (0 << 10)| /* TMR not paused when halted */
    131                             (0 << 4)  | /* already 1024Hz */
    132                             (0 << 0)) ; /* select SlowRC */
   \   0000000E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000012   0x....             LDR.N    R1,??DataTable2_4  ;; 0x4000600c
   \   00000014   0x6008             STR      R0,[R1, #+0]
    133              #ifndef DISABLE_RC_CALIBRATION
    134                halInternalCalibrateSlowRc(); /* calibrate SlowRC to 1024Hz */
   \   00000016   0x.... 0x....      BL       halInternalCalibrateSlowRc
    135              #endif /* DISABLE_RC_CALIBRATION */
    136          #endif /*ENABLE_OSC32K */
    137            
    138            /* clear out any stale interrupts */
    139            SLPTMR->ISR = (SLPTMR_IER_WRAP | SLPTMR_IER_CMPA | SLPTMR_IER_CMPB);
   \   0000001A   0x2107             MOVS     R1,#+7
   \   0000001C   0x....             LDR.N    R0,??DataTable2_5  ;; 0x4000a014
   \   0000001E   0x6001             STR      R1,[R0, #+0]
    140            /* turn off second level interrupts.  they will be enabled elsewhere as needed */
    141            SLPTMR->IER = 0x00;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x6401             STR      R1,[R0, #+64]
    142            /* enable top-level interrupt */
    143            NVIC->ISER[0] = NVIC_IxxR_SLEEPTMR;
   \   00000024   0x2010             MOVS     R0,#+16
   \   00000026   0x....             LDR.N    R1,??DataTable2_6  ;; 0xe000e100
   \   00000028   0x6008             STR      R0,[R1, #+0]
    144            
    145            return 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xBD02             POP      {R1,PC}          ;; return
    146          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4000B010         DC32     0x4000b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4000B014         DC32     0x4000b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40000008         DC32     0x40000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x4000600C         DC32     0x4000600c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x4000A014         DC32     0x4000a014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0xE000E100         DC32     0xe000e100
    147          
    148          /**
    149            * @}
    150            */
    151          
    152          /**
    153            * @}
    154            */ 
    155          
    156          /**
    157            * @}
    158            */
    159          
    160          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   halGpioConfig
       0   halGpioSet
       8   halInternalStartSystemTimer
         8   -> halInternalCalibrateSlowRc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
      24  configRegs
      36  halGpioConfig
      30  halGpioSet
      46  halInternalStartSystemTimer

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
