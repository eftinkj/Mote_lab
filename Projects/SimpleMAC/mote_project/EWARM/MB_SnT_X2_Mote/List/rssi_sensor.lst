###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:28:45
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_CogNet\rssi_sensor.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_CogNet\rssi_sensor.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"rssi_sensor.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_CogNet\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\rssi_sensor.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\rssi_sensor.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_CogNet\rssi_sensor.c
      1          
      2          #include "rssi_sensor.h"
      3          #include "sys_func.h"
      4          
      5          #include "FEAT_STM32W/STM32W_Radio.h"
      6          
      7          #if defined(_ENABLE_RSSI_SENSOR_)
      8          
      9          #define	RS_DEFAULT_DST_ADDR	0xFD
     10          
     11          IAR_PACKED struct
     12          {
     13          	rssi_one_hop_t RssiOneHop[RSSI_MAX_ONE_HOPS];
     14          } RssiOneHops;
     15          
     16          
     17          float rs_alpha;
     18          
     19          uint16_t	rs_dst_addr;
     20          
     21          void rs_power_up()
     22          {
     23          	uint8_t i;
     24          	for(i=0; i< RSSI_MAX_ONE_HOPS; i++)
     25          	{
     26          		RssiOneHops.RssiOneHop[i].ID = NO_NODE_IDX;
     27          		RssiOneHops.RssiOneHop[i].rssi_count = 0;
     28          		RssiOneHops.RssiOneHop[i].aver_rssi = 0;
     29          	}
     30          	rs_alpha = 0.5;
     31          	rs_dst_addr = RS_DST_ADDR;
     32          }
     33          
     34          void rs_init()
     35          {
     36          	// Connect to system (loop, timeout, etc)
     37          	rs_dst_addr	= RS_DEFAULT_DST_ADDR;
     38          }
     39          
     40          
     41          void rs_rx_rssi(uint16_t id, sint8_t rssi)
     42          {
     43          	uint8_t	idx = rs_get_ID_idx(id);
     44          	if ( NO_NODE_IDX == idx )
     45          	{
     46          		rs_add_ID( id, rssi);
     47          	}
     48          	else
     49          	{
     50          		// Should not happen
     51          		rs_update_rssi_IDX(idx, rssi);		
     52          	}
     53          }
     54          
     55          void rs_add_ID( uint16_t id, sint8_t rssi)
     56          {
     57          	uint8_t idx = rs_get_free_IDX(id);
     58          	if ( NO_NODE_IDX == idx )
     59          	{
     60          		sys_error(10); // Unable to find free space -> remove unused/old?
     61          	}
     62          	else
     63          	{
     64          		RssiOneHops.RssiOneHop[idx].aver_rssi = rssi;
     65          		rs_update_rssi_IDX(idx, rssi);
     66          	}
     67          }
     68          
     69          
     70          uint8_t	rs_get_ID_idx(uint16_t id)
     71          {
     72          	uint8_t i;
     73          	for(i=0; i<RSSI_MAX_ONE_HOPS; i++)
     74          	{
     75          		if (id == RssiOneHops.RssiOneHop[i].ID)
     76          		{
     77          			return i;
     78          		}
     79          	}
     80          	return NO_NODE_IDX;
     81          }
     82          
     83          uint8_t	rs_get_free_IDX(uint16_t id)
     84          {
     85          	uint8_t i;
     86          	for(i=0; i<RSSI_MAX_ONE_HOPS; i++)
     87          	{
     88          		if (NO_NODE_IDX == RssiOneHops.RssiOneHop[i].ID)
     89          		{
     90          			RssiOneHops.RssiOneHop[i].ID = id;
     91          			RssiOneHops.RssiOneHop[i].rssi_count = 0;
     92          			RssiOneHops.RssiOneHop[i].aver_rssi = 0;
     93          			return i;
     94          		}
     95          	}
     96          	return NO_NODE_IDX;
     97          }
     98          
     99          void rs_delete_IDX(uint8_t idx)
    100          {
    101          	if (idx <RSSI_MAX_ONE_HOPS)
    102          		RssiOneHops.RssiOneHop[idx].ID = NO_NODE_IDX;
    103          		RssiOneHops.RssiOneHop[idx].rssi_count = 0;
    104          		RssiOneHops.RssiOneHop[idx].aver_rssi = 0;
    105          }
    106          
    107          
    108          void rs_update_rssi_IDX(uint8_t idx, sint8_t rssi)
    109          {
    110          	RssiOneHops.RssiOneHop[idx].rssi_history
    111          		[RssiOneHops.RssiOneHop[idx].rssi_count++] = rssi;
    112          	if (RssiOneHops.RssiOneHop[idx].rssi_count)
    113          	{
    114          		rs_sent_report(idx);	// TODO change to event/message driven to offload packet reception callback function??
    115          		// WHO SHOULD ZERO THE COUNT??
    116          		RssiOneHops.RssiOneHop[idx].rssi_count = 0;
    117          	}
    118          	RssiOneHops.RssiOneHop[idx].aver_rssi =
    119          		rs_alpha * RssiOneHops.RssiOneHop[idx].aver_rssi + (1-rs_alpha)*rssi;
    120          }
    121          
    122          #include "common_constants.h"
    123          #include "FEAT_Networking/tsp_common_pub.h"
    124          void rs_sent_report(uint8_t idx)
    125          {
    126          	uint8_t * ptr_pkt_id = NULL;
    127          	sint8_t * ptr_samples = NULL;
    128          	uint8_t data_size = RS_MODULE_HEADER_LEN + RssiOneHops.RssiOneHop[idx].rssi_count;
    129          	rs_module_t *ptr_module = (rs_module_t*)tsp_new_module( PKT_MODULE_TYPE_RS_RSSI_REPORT, data_size, ptr_pkt_id, rs_dst_addr );
    130          	if (0 == ptr_module)
    131          	{
    132          		sys_error(11);
    133          		return;
    134          	}
    135          	ptr_module -> reporter_addr = MY_ADDR;
    136          	ptr_module -> node_addr = RssiOneHops.RssiOneHop[idx].ID;
    137          	ptr_module -> rss_aver = RssiOneHops.RssiOneHop[idx].aver_rssi;
    138          	ptr_module -> rssi_count = RssiOneHops.RssiOneHop[idx].rssi_count;
    139          	ptr_samples = &(ptr_module -> rssi_samples) ;
    140          	for (uint8_t i=0; i < RssiOneHops.RssiOneHop[idx].rssi_count; i++)
    141          	{
    142          		ptr_samples[i] = RssiOneHops.RssiOneHop[idx].rssi_history[i];
    143          	}
    144          	if (MY_ADDR == RS_DST_ADDR)
    145          	{
    146          		rs_receive_report((uint8_t*)ptr_module);
    147          		tsp_release_packet(*ptr_pkt_id);
    148          	}
    149          	else if (0 == tsp_send_from_modules( *ptr_pkt_id ))
    150          	{
    151          		sys_error(12);
    152          	}
    153          	return;
    154          }
    155          
    156          void rs_receive_report(uint8_t *module)
    157          {
    158          	sint8_t * ptr_samples = NULL;
    159          	rs_module_t *ptr_module = (rs_module_t*)module;
    160          	//ptr_module -> reporter_addr;
    161          	//ptr_module -> node_addr;
    162          	//ptr_module -> rss_aver;
    163          	ptr_samples = &(ptr_module ->rssi_samples);
    164          	for (uint8_t i=0; i < ptr_module -> rssi_count; i++)
    165          	{
    166          		printf ( "From %d about %d rssi=%d\r", ptr_module -> reporter_addr, ptr_module -> node_addr, ptr_samples[i] );
    167          	}
    168          }
    169          
    170          #endif // defined (_ENABLE_RSSI_SENSOR_)


 

 


Errors: none
Warnings: none
