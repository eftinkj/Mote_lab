###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:29:09
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_SigProc\sig_basic.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_SigProc\sig_basic.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"sig_basic.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_SigProc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\sig_basic.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\sig_basic.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\arm_mote\FEAT_SigProc\sig_basic.c
      1          #include "defs/esnl_pub.h"
      2          
      3          #ifdef _ENABLE_SIG_BASIC_
      4          
      5          #include "sig_basic_prv.h"
      6          #include "sig_basic_pub.h"
      7          
      8          
      9          //#include "sys_func.h"
     10          
     11          //#include "packet.h"
     12          //#include "common.h"
     13          
     14          
     15          #include "FEAT_Networking/tsp_common_pub.h"
     16          #include "FEAT_Scheduler/sch_basic_pub.h"
     17          
     18          
     19          //#define SIG_TEST
     20          #undef SIG_TEST
     21          
     22          
     23          /****************************************************************************
     24          **	Constants, definies and typedefs  (PUBLIC)
     25          ****************************************************************************/
     26          
     27          /****************************************************************************
     28          **	Variables definition (PRIVATE)
     29          ****************************************************************************/
     30          
     31          
     32          /****************************************************************************
     33          **	Variables definition (PUBLIC)
     34          ****************************************************************************/
     35          
     36          
     37          /****************************************************************************
     38          **	Functions implementation (PUBLIC)
     39          ****************************************************************************/
     40          
     41          
     42          
     43          sig_filter_mem_t xdata* filter_mem_p;
     44          uint8_t	xdata filter_mem_raw[SIG_FILTER_MEM_SIZE];
     45          
     46          
     47          /**
     48            * sig_init () - sets up Signal Processing Module
     49            */
     50          void sig_init ( void )
     51          {
     52          	float xdata * temp_coeff;
     53          	filter_mem_p = (sig_filter_mem_t xdata* )filter_mem_raw;
     54          	filter_mem_p->sig_filter_idx = FILTER_DEFAULT_SIZE;
     55          	filter_mem_p->sig_filter_size = FILTER_DEFAULT_SIZE;
     56          	filter_mem_p->sig_filter_type = FILTER_TYPE_BUTTER;
     57          	offset = 0;
     58          	temp_coeff = (float xdata*)&(filter_mem_p->dynamic);
     59          	
     60          	filter_mem_p->a = &(temp_coeff[offset]);
     61          	offset += filter_mem_p->sig_filter_size;
     62          	filter_mem_p->b = &(temp_coeff[offset]);
     63          	offset += filter_mem_p->sig_filter_size;
     64          	filter_mem_p->y = &(temp_coeff[offset]);
     65          	offset += filter_mem_p->sig_filter_size;
     66          	filter_mem_p->x = &(temp_coeff[offset]);
     67          
     68          	for(i=0; i<filter_mem_p->sig_filter_size; i++)
     69          	{
     70          		(filter_mem_p->a)[i] = 0.0;
     71          		(filter_mem_p->b)[i] = 0.0;
     72          		(filter_mem_p->y)[i] = 0.0;
     73          		(filter_mem_p->x)[i] = 0.0;
     74          	}
     75          
     76          #ifdef SIG_FILTER_DEFAULT_BUTTER
     77          		filter_mem_p->sig_filter_idx = FILTER_DEFAULT_SIZE;
     78          		filter_mem_p->sig_filter_size = FILTER_DEFAULT_SIZE;
     79          		(filter_mem_p->a)[0] = 1;	
     80          		(filter_mem_p->a)[1] = -1.957798683495732;
     81          		(filter_mem_p->a)[2] = 0.958670943992033;
     82          
     83          		(filter_mem_p->b)[0] = 0.000218065124075;
     84          		(filter_mem_p->b)[1] = 0.00043613024815;
     85          		(filter_mem_p->b)[2] = 0.000218065124075;
     86          #endif // SIG_FILTER_DEFAULT_BUTTER
     87          }
     88          
     89          
     90          
     91          /**
     92          * sig_test() - tests Signal Processing operation (e.g.)
     93          */
     94          uint8_t sig_test()
     95          {
     96          
     97          }
     98          
     99          
    100          /**
    101            * sig_loop() - executes main loop block (BUT DOES NOT LOOP ITSELF!!!)
    102            */
    103          void sig_loop( void );
    104          
    105          
    106          /****************************************************************************
    107          **	Functions implementation (PRIVATE)
    108          ****************************************************************************/
    109          
    110          
    111          /**
    112          * sig_filter_new_data(input) - 
    113          *	
    114          */
    115          void sig_filter_reset(sig_filter_mem_t xdata *filter);
    116          
    117          /**
    118          * sig_filter_new_config(module) - 
    119          *	
    120          */
    121          void sig_filter_new_config(sig_filter_mem_t xdata *filter, uint8_t * module)
    122          {
    123          }
    124          
    125          /**
    126          * sig_filter_new_data(input) - 
    127          *	
    128          */
    129          float sig_filter_new_data( sig_filter_mem_t xdata *filter, float input )
    130          {
    131          	float new_y = B[1] * input;
    132          	X[idx%] = input;
    133              for(i=2; i<3; i++)
    134          	{
    135          		new_y = new_y + X(idx-i+1)* B(i) - Y(idx-i+1)*A(i);
    136          	}
    137          	Y[idx] = new_y;
    138          }
    139          
    140          
    141          // ############################################################################
    142          // ############################################################################
    143          // Spacers
    144          // ############################################################################
    145          // ############################################################################
    146          
    147          
    148          
    149          #endif // _ENABLE_SIG_BASIC_
    150          


 

 


Errors: none
Warnings: none
