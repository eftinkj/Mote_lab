###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:30:06
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Libraries\STM32W108xx_StdPeriph_Driver\src\stm32w108xx_misc.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Libraries\STM32W108xx_StdPeriph_Driver\src\stm32w108xx_misc.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"stm32w108xx_misc.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Libraries\STM32W108xx_StdPeriph_Driver\src\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\stm32w108xx_misc.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\stm32w108xx_misc.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Libraries\STM32W108xx_StdPeriph_Driver\src\stm32w108xx_misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32w108xx_misc.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    30-November-2012
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     13            *
     14            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     15            * You may not use this file except in compliance with the License.
     16            * You may obtain a copy of the License at:
     17            *
     18            *        http://www.st.com/software_license_agreement_liberty_v2
     19            *
     20            * Unless required by applicable law or agreed to in writing, software 
     21            * distributed under the License is distributed on an "AS IS" BASIS, 
     22            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     23            * See the License for the specific language governing permissions and
     24            * limitations under the License.
     25            *
     26            ******************************************************************************
     27            */
     28          
     29          /* Includes ------------------------------------------------------------------*/
     30          #include "stm32w108xx_misc.h"
     31          
     32          /** @addtogroup STM32W108xx_StdPeriph_Driver
     33            * @{
     34            */
     35          
     36          /** @defgroup MISC 
     37            * @brief MISC driver modules
     38            * @{
     39            */
     40          
     41          /* Private typedef -----------------------------------------------------------*/
     42          /* Private define ------------------------------------------------------------*/
     43          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     44          
     45          /* Private macro -------------------------------------------------------------*/
     46          /* Private variables ---------------------------------------------------------*/
     47          /* Private function prototypes -----------------------------------------------*/
     48          /* Private functions ---------------------------------------------------------*/
     49          
     50          /** @defgroup MISC_Private_Functions
     51            * @{
     52            */
     53            
     54          /**
     55            *
     56          @verbatim
     57           *******************************************************************************
     58                             ##### Interrupts configuration functions #####
     59           *******************************************************************************
     60              [..] This section provide functions allowing to configure the NVIC interrupts 
     61                   (IRQ).The Cortex-M3 exceptions are managed by CMSIS functions.
     62                   (#) Configure the NVIC Priority Grouping using NVIC_PriorityGroupConfig() 
     63                       function according to the following table.
     64                       The table below gives the allowed values of the preemption priority 
     65                       and subpriority according to the Priority Grouping configuration 
     66                       performed by NVIC_PriorityGroupConfig function.
     67            ============================================================================================================================
     68              NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  | Description
     69            ============================================================================================================================
     70             NVIC_PriorityGroup_0  |                0                  |            0-15             |   0 bits for preemption priority
     71                                   |                                   |                             |   4 bits for subpriority
     72            ----------------------------------------------------------------------------------------------------------------------------
     73             NVIC_PriorityGroup_1  |                0-1                |            0-7              |   1 bits for preemption priority
     74                                   |                                   |                             |   3 bits for subpriority
     75            ----------------------------------------------------------------------------------------------------------------------------
     76             NVIC_PriorityGroup_2  |                0-3                |            0-3              |   2 bits for preemption priority
     77                                   |                                   |                             |   2 bits for subpriority
     78            ----------------------------------------------------------------------------------------------------------------------------
     79             NVIC_PriorityGroup_3  |                0-7                |            0-1              |   3 bits for preemption priority
     80                                   |                                   |                             |   1 bits for subpriority
     81            ----------------------------------------------------------------------------------------------------------------------------
     82             NVIC_PriorityGroup_4  |                0-15               |            0                |   4 bits for preemption priority
     83                                   |                                   |                             |   0 bits for subpriority
     84            ============================================================================================================================
     85          
     86          
     87                   (#) Enable and Configure the priority of the selected IRQ Channels.  
     88          
     89                  -@- When the NVIC_PriorityGroup_0 is selected, it will no any nested interrupt,
     90                      the IRQ priority will be managed only by subpriority.
     91                      The sub-priority is only used to sort pending exception priorities, 
     92                      and does not affect active exceptions.
     93                  -@- Lower priority values gives higher priority.
     94                  -@- Priority Order:
     95                      (#@) Lowest Preemption priority.
     96                      (#@) Lowest Subpriority.
     97                      (#@) Lowest hardware priority (IRQn position).
     98            
     99          @endverbatim
    100          */
    101          
    102          /**
    103            * @brief  Configures the priority grouping: preemption priority and subpriority.
    104            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
    105            *   This parameter can be one of the following values:
    106            *     @arg NVIC_PriorityGroup_0: 0 bits for preemption priority
    107            *                                4 bits for subpriority.
    108            *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
    109            *           interrupt. This interrupts priority is managed only with subpriority.  
    110            *     @arg NVIC_PriorityGroup_1: 1 bits for preemption priority.
    111            *                                3 bits for subpriority.
    112            *     @arg NVIC_PriorityGroup_2: 2 bits for preemption priority.
    113            *                                2 bits for subpriority.
    114            *     @arg NVIC_PriorityGroup_3: 3 bits for preemption priority.
    115            *                                1 bits for subpriority.
    116            *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
    117            *                                0 bits for subpriority.
    118            * @retval None
    119            */

   \                                 In section .text, align 2, keep-with-next
    120          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
    121          {
    122            /* Check the parameters */
    123            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
    124            
    125            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    126            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
   \                     NVIC_PriorityGroupConfig: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable3  ;; 0x5fa0000
   \   00000002   0x4308             ORRS     R0,R1,R0
   \   00000004   0x....             LDR.N    R1,??DataTable3_1  ;; 0xe000ed0c
   \   00000006   0x6008             STR      R0,[R1, #+0]
    127          }
   \   00000008   0x4770             BX       LR               ;; return
    128          
    129          /**
    130            * @brief  Initializes the NVIC peripheral according to the specified
    131            *         parameters in the NVIC_InitStruct.
    132            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    133            *         function should be called before.
    134            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    135            *         the configuration information for the specified NVIC peripheral.
    136            * @retval None
    137            */

   \                                 In section .text, align 2, keep-with-next
    138          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    139          {
   \                     NVIC_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    140            uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    141            
    142            /* Check the parameters */
    143            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
    144            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
    145            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    146              
    147            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
   \   00000002   0x7803             LDRB     R3,[R0, #+0]
   \   00000004   0x78C4             LDRB     R4,[R0, #+3]
   \   00000006   0x461A             MOV      R2,R3
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0xB1EC             CBZ.N    R4,??NVIC_Init_0
    148            {
    149              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    150              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
   \   0000000C   0x....             LDR.N    R3,??DataTable3_1  ;; 0xe000ed0c
   \   0000000E   0x681B             LDR      R3,[R3, #+0]
    151              tmppre = (0x4 - tmppriority);
    152              tmpsub = tmpsub >> tmppriority;
    153          
    154              tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    155              tmppriority |=  (uint8_t)((NVIC_InitStruct->NVIC_IRQChannelSubPriority) & tmpsub);
    156              tmppriority = tmppriority << 0x04;
    157                  
    158              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
   \   00000010   0x7844             LDRB     R4,[R0, #+1]
   \   00000012   0xF403 0x63E0      AND      R3,R3,#0x700
   \   00000016   0xF5C3 0x63E0      RSB      R3,R3,#+1792
   \   0000001A   0x0A1B             LSRS     R3,R3,#+8
   \   0000001C   0xF1C3 0x0504      RSB      R5,R3,#+4
   \   00000020   0x40AC             LSLS     R4,R4,R5
   \   00000022   0x7885             LDRB     R5,[R0, #+2]
   \   00000024   0x260F             MOVS     R6,#+15
   \   00000026   0xFA26 0xF703      LSR      R7,R6,R3
   \   0000002A   0xEA07 0x0305      AND      R3,R7,R5
   \   0000002E   0x4323             ORRS     R3,R3,R4
   \   00000030   0x....             LDR.N    R4,??DataTable3_2  ;; 0xe000e400
   \   00000032   0x011B             LSLS     R3,R3,#+4
   \   00000034   0x5513             STRB     R3,[R2, R4]
    159              
    160              /* Enable the Selected IRQ Channels --------------------------------------*/
    161              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    162                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0xF000 0x021F      AND      R2,R0,#0x1F
   \   0000003C   0x4091             LSLS     R1,R1,R2
   \   0000003E   0x....             LDR.N    R2,??DataTable3_3  ;; 0xe000e100
   \   00000040   0x0940             LSRS     R0,R0,#+5
   \   00000042   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000046   0xBDF0             POP      {R4-R7,PC}
    163            }
    164            else
    165            {
    166              /* Disable the Selected IRQ Channels -------------------------------------*/
    167              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    168                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \                     ??NVIC_Init_0: (+1)
   \   00000048   0xF003 0x001F      AND      R0,R3,#0x1F
   \   0000004C   0xFA01 0xF000      LSL      R0,R1,R0
   \   00000050   0x....             LDR.N    R1,??DataTable3_4  ;; 0xe000e180
   \   00000052   0x0952             LSRS     R2,R2,#+5
   \   00000054   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    169            }
    170          }
   \   00000058   0xBDF0             POP      {R4-R7,PC}       ;; return
    171          
    172          /**
    173            * @brief  Sets the vector table location and Offset.
    174            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    175            *   This parameter can be one of the following values:
    176            *     @arg NVIC_VectTab_RAM: Vector Table in internal SRAM.
    177            *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
    178            * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
    179            * @retval None
    180            */

   \                                 In section .text, align 2, keep-with-next
    181          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    182          { 
    183            /* Check the parameters */
    184            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
    185            assert_param(IS_NVIC_OFFSET(Offset));  
    186             
    187            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
   \                     NVIC_SetVectorTable: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable3_5  ;; 0x1fffff80
   \   00000002   0x4011             ANDS     R1,R2,R1
   \   00000004   0x4308             ORRS     R0,R1,R0
   \   00000006   0x....             LDR.N    R1,??DataTable3_6  ;; 0xe000ed08
   \   00000008   0x6008             STR      R0,[R1, #+0]
    188          }
   \   0000000A   0x4770             BX       LR               ;; return
    189          
    190          /**
    191            * @brief  Selects the condition for the system to enter low power mode.
    192            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    193            *   This parameter can be one of the following values:
    194            *     @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    195            *     @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    196            *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    197            * @param  NewState: new state of LP condition. 
    198            *         This parameter can be: ENABLE or DISABLE.
    199            * @retval None
    200            */

   \                                 In section .text, align 2, keep-with-next
    201          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    202          {
    203            /* Check the parameters */
    204            assert_param(IS_NVIC_LP(LowPowerMode));
    205            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    206            
    207            if (NewState != DISABLE)
   \                     NVIC_SystemLPConfig: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable3_7  ;; 0xe000ed10
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0x6811             LDR      R1,[R2, #+0]
   \   00000006   0xBF14             ITE      NE 
   \   00000008   0x4308             ORRNE    R0,R0,R1
   \   0000000A   0xEA21 0x0000      BICEQ    R0,R1,R0
    208            {
    209              SCB->SCR |= LowPowerMode;
    210            }
    211            else
    212            {
    213              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
   \   0000000E   0x6010             STR      R0,[R2, #+0]
    214            }
    215          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x05FA0000         DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x1FFFFF80         DC32     0x1fffff80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0xE000ED10         DC32     0xe000ed10
    216          
    217          /**
    218            * @}
    219            */
    220          
    221          /**
    222            * @}
    223            */
    224          
    225          /**
    226            * @}
    227            */
    228            
    229          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   NVIC_Init
       0   NVIC_PriorityGroupConfig
       0   NVIC_SetVectorTable
       0   NVIC_SystemLPConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
      90  NVIC_Init
      10  NVIC_PriorityGroupConfig
      12  NVIC_SetVectorTable
      18  NVIC_SystemLPConfig

 
 162 bytes in section .text
 
 162 bytes of CODE memory

Errors: none
Warnings: none
