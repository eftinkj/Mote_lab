###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        21/Feb/2015  16:27:17
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\mfg-token.c
#    Command line =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\mfg-token.c
#        -D USE_STDPERIPH_DRIVER -D USE_MB_SNT_X2 -D STM32W108CB -D
#        "PLATFORM_HEADER=\"Utilities\STM32W108xx_HAL_Driver/micro/cortexm3/compiler/iar.h\""
#        -D CORTEXM3 -D CORTEXM3_STM32W108 -D CORTEXM3_STM32W108xB -D
#        DISABLE_WATCHDOG -D "__SOURCEFILE__=\"mfg-token.c\"" -lC
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\
#        --diag_suppress Pa050 -o
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\stm32w108\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\generic\compiler\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\bootloader\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\Shared\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\STM32W108xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32W108xx\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Libraries\SimpleMAC\Include\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\..\..\Utilities\STM32_EVAL\MB851\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\
#        -I
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\..\..\arm_mote\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\List\mfg-token.lst
#    Object file  =  
#        C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Projects\SimpleMAC\mote_project\EWARM\MB_SnT_X2_Mote\Obj\mfg-token.o
#
###############################################################################

C:\Users\Jon\Documents\MO_S_and_T\CpE5170_RT_Systems\Labs\cpe-5170-mote-code\Utilities\STM32W108xx_HAL_Driver\micro\cortexm3\mfg-token.c
      1          /**
      2            ******************************************************************************
      3            * @file    mfg-token.c 
      4            * @author  MCD Application Team
      5            * @version V2.0.1
      6            * @date    30-November-2012 
      7            * @brief   Cortex-M3 Manufacturing-Token system
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          
     30          #include PLATFORM_HEADER
     31          #include "error.h"
     32          #include "hal_flash.h"
     33          #include "mfg-token.h"
     34          
     35          /** @addtogroup HAL
     36            * @{
     37            */
     38          
     39          /** @defgroup mfg-token
     40            * @brief mfg-token modules
     41            * @{
     42            */
     43          
     44          /* Private define ------------------------------------------------------------*/
     45          #define DEFINETOKENS
     46          #define TOKEN_MFG(name,creator,iscnt,isidx,type,arraysize,...) \
     47          const uint16_t TOKEN_##name = TOKEN_##name##_ADDRESS;
     48          #include "token-manufacturing.h"

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_CHIP_DATA
   \                     TOKEN_MFG_CHIP_DATA:
   \   00000000   0x077E             DC16 1918

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_PART_DATA
   \                     TOKEN_MFG_PART_DATA:
   \   00000000   0x0796             DC16 1942

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_TESTER_DATA
   \                     TOKEN_MFG_TESTER_DATA:
   \   00000000   0x079C             DC16 1948

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_ST_EUI_64
   \                     TOKEN_MFG_ST_EUI_64:
   \   00000000   0x07A2             DC16 1954

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_ANALOG_TRIM_NORMAL
   \                     TOKEN_MFG_ANALOG_TRIM_NORMAL:
   \   00000000   0x07AA             DC16 1962

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_ANALOG_TRIM_BOOST
   \                     TOKEN_MFG_ANALOG_TRIM_BOOST:
   \   00000000   0x07BE             DC16 1982

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_ANALOG_TRIM_BOTH
   \                     TOKEN_MFG_ANALOG_TRIM_BOTH:
   \   00000000   0x07D2             DC16 2002

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_REG_TRIM
   \                     TOKEN_MFG_REG_TRIM:
   \   00000000   0x07DC             DC16 2012

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_1V8_REG_VOLTAGE
   \                     TOKEN_MFG_1V8_REG_VOLTAGE:
   \   00000000   0x07DE             DC16 2014

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_VREF_VOLTAGE
   \                     TOKEN_MFG_VREF_VOLTAGE:
   \   00000000   0x07E0             DC16 2016

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_TEMP_CAL
   \                     TOKEN_MFG_TEMP_CAL:
   \   00000000   0x07E2             DC16 2018

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_FIB_VERSION
   \                     TOKEN_MFG_FIB_VERSION:
   \   00000000   0x07F4             DC16 2036

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_FIB_CHECKSUM
   \                     TOKEN_MFG_FIB_CHECKSUM:
   \   00000000   0x07F6             DC16 2038

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_FIB_OBS
   \                     TOKEN_MFG_FIB_OBS:
   \   00000000   0x07F8             DC16 2040

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_CIB_OBS
   \                     TOKEN_MFG_CIB_OBS:
   \   00000000   0x0800             DC16 2048

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_CUSTOM_VERSION
   \                     TOKEN_MFG_CUSTOM_VERSION:
   \   00000000   0x0810             DC16 2064

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_CUSTOM_EUI_64
   \                     TOKEN_MFG_CUSTOM_EUI_64:
   \   00000000   0x0812             DC16 2066

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_STRING
   \                     TOKEN_MFG_STRING:
   \   00000000   0x081A             DC16 2074

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_BOARD_NAME
   \                     TOKEN_MFG_BOARD_NAME:
   \   00000000   0x082A             DC16 2090

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_MANUF_ID
   \                     TOKEN_MFG_MANUF_ID:
   \   00000000   0x083A             DC16 2106

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_PHY_CONFIG
   \                     TOKEN_MFG_PHY_CONFIG:
   \   00000000   0x083C             DC16 2108

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_BOOTLOAD_AES_KEY
   \                     TOKEN_MFG_BOOTLOAD_AES_KEY:
   \   00000000   0x083E             DC16 2110

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_EZSP_STORAGE
   \                     TOKEN_MFG_EZSP_STORAGE:
   \   00000000   0x084E             DC16 2126

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_ASH_CONFIG
   \                     TOKEN_MFG_ASH_CONFIG:
   \   00000000   0x0856             DC16 2134

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_CBKE_DATA
   \                     TOKEN_MFG_CBKE_DATA:
   \   00000000   0x087E             DC16 2174

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_INSTALLATION_CODE
   \                     TOKEN_MFG_INSTALLATION_CODE:
   \   00000000   0x08DA             DC16 2266

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_OSC24M_BIAS_TRIM
   \                     TOKEN_MFG_OSC24M_BIAS_TRIM:
   \   00000000   0x08EE             DC16 2286

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_SYNTH_FREQ_OFFSET
   \                     TOKEN_MFG_SYNTH_FREQ_OFFSET:
   \   00000000   0x08F0             DC16 2288

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute uint16_t const TOKEN_MFG_EUI_64
   \                     TOKEN_MFG_EUI_64:
   \   00000000   0x8000             DC16 32768
     49          #undef TOKEN_DEF
     50          #undef TOKEN_MFG
     51          #undef DEFINETOKENS
     52          
     53          /* Private typedef -----------------------------------------------------------*/
     54          /* Private macros ------------------------------------------------------------*/
     55          /* BIG_INFO block */
     56          #define DATA_BIG_INFO_BASE                                   (0x08040000u)
     57          #define DATA_BIG_INFO_END                                    (0x080407FFu)
     58          #define DATA_BIG_INFO_SIZE                                   (DATA_BIG_INFO_END - DATA_BIG_INFO_BASE + 1)
     59          
     60          /* Private variables ---------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     61          static const uint8_t nullEui[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \                     nullEui:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
     62          
     63          /* Private function prototypes -----------------------------------------------*/
     64          /* Private functions ---------------------------------------------------------*/
     65          
     66          /** @defgroup  mfg-token_Private_Functions
     67            * @{
     68            */
     69          
     70          
     71          /**
     72            * @brief  Gets Mfg Token data. 
     73            * @param  Data
     74            * @param  Token
     75            * @param  The index
     76            * @param  The lenght of the data
     77            * @retval None
     78            */

   \                                 In section .text, align 2, keep-with-next
     79          void halInternalGetMfgTokenData(void *data, uint16_t token, uint8_t index, uint8_t len)
     80          {
   \                     halInternalGetMfgTokenData: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
     81            uint8_t *ram = (uint8_t*)data;
     82            
     83            /* 0x7F is a non-indexed token.  Remap to 0 for the address calculation */
     84            index = (index==0x7F) ? 0 : index;
   \   00000006   0x287F             CMP      R0,#+127
   \   00000008   0xBF08             IT       EQ 
   \   0000000A   0x2000             MOVEQ    R0,#+0
     85            
     86            if(token == MFG_EUI_64_LOCATION)
   \   0000000C   0xF5B1 0x4F00      CMP      R1,#+32768
   \   00000010   0xB083             SUB      SP,SP,#+12
   \   00000012   0xD11A             BNE.N    ??halInternalGetMfgTokenData_0
     87            {
     88              /* There are two EUI64's stored in the Info Blocks, St and Custom.
     89              0x0A00 is the address used by the generic EUI64 token, and it is
     90              token.c's responbility to pick the returned EUI64 from either St
     91              or Custom.  Return the Custom EUI64 if it is not all FF's, otherwise
     92              return the St EUI64. */
     93              tokTypeMfgEui64 eui64;
     94              halCommonGetMfgToken(&eui64, TOKEN_MFG_CUSTOM_EUI_64);
   \   00000014   0x2308             MOVS     R3,#+8
   \   00000016   0x227F             MOVS     R2,#+127
   \   00000018   0xF640 0x0112      MOVW     R1,#+2066
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0xF7FF 0xFFEF      BL       halInternalGetMfgTokenData
     95              if(MEMCOMPARE(eui64,nullEui, 8 /*EUI64_SIZE*/) == 0) 
   \   00000022   0x2208             MOVS     R2,#+8
   \   00000024   0x.... 0x....      ADR.W    R1,nullEui
   \   00000028   0xA800             ADD      R0,SP,#+0
   \   0000002A   0x.... 0x....      BL       halCommonMemCompare
   \   0000002E   0xB930             CBNZ.N   R0,??halInternalGetMfgTokenData_1
     96              {
     97                halCommonGetMfgToken(&eui64, TOKEN_MFG_ST_EUI_64);
   \   00000030   0x2308             MOVS     R3,#+8
   \   00000032   0x227F             MOVS     R2,#+127
   \   00000034   0xF240 0x71A2      MOVW     R1,#+1954
   \   00000038   0xA800             ADD      R0,SP,#+0
   \   0000003A   0xF7FF 0xFFE1      BL       halInternalGetMfgTokenData
     98              }
     99              MEMCOPY(ram, eui64, 8 /*EUI64_SIZE*/);
   \                     ??halInternalGetMfgTokenData_1: (+1)
   \   0000003E   0x2208             MOVS     R2,#+8
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       halCommonMemCopy
   \   00000048   0xBD37             POP      {R0-R2,R4,R5,PC}
    100            } 
    101            else
    102            {
    103              /* read from the Information Blocks.  The token ID is only the
    104              bottom 16bits of the token's actual address.  Since the info blocks
    105              exist in the range DATA_BIG_INFO_BASE-DATA_BIG_INFO_END, we need
    106              to OR the ID with DATA_BIG_INFO_BASE to get the real address. */
    107              uint32_t realAddress = (DATA_BIG_INFO_BASE|token) + (len*index);
    108              uint8_t *flash = (uint8_t *)realAddress;
    109              MEMCOPY(ram, flash, len);
   \                     ??halInternalGetMfgTokenData_0: (+1)
   \   0000004A   0x....             LDR.N    R5,??DataTable37  ;; 0x8040000
   \   0000004C   0x4329             ORRS     R1,R5,R1
   \   0000004E   0xFB00 0x1103      MLA      R1,R0,R3,R1
   \   00000052   0x461A             MOV      R2,R3
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       halCommonMemCopy
    110            }
    111          }
   \   0000005A   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    112          
    113          /**
    114            * @brief  Sets Mfg Token data.
    115            * @param  Token
    116            * @param  pointer to the data
    117            * @param  The lenght of the data
    118            * @retval None
    119            */

   \                                 In section .text, align 2, keep-with-next
    120          void halInternalSetMfgTokenData(uint16_t token, void *data, uint8_t len)
    121          {
   \                     halInternalSetMfgTokenData: (+1)
   \   00000000   0xE92D 0x4CF8      PUSH     {R3-R7,R10,R11,LR}
   \   00000004   0x460C             MOV      R4,R1
    122            StStatus flashStatus;
    123            uint32_t realAddress = (DATA_BIG_INFO_BASE|token);
   \   00000006   0x....             LDR.N    R1,??DataTable37  ;; 0x8040000
    124            uint8_t * flash = (uint8_t *)realAddress;
    125            uint32_t i;
    126            
    127            /* The flash library (and hardware) requires the address and length to both
    128               be multiples of 16bits.  Since this API is only valid for writing to
    129               the CIB, verify that the token+len falls within the CIB. */
    130            assert((token&1) != 1);
   \   00000008   0x.... 0x....      ADR.W    R10,?_1
   \   0000000C   0xEA41 0x0600      ORR      R6,R1,R0
   \   00000010   0x07C0             LSLS     R0,R0,#+31
   \   00000012   0x4615             MOV      R5,R2
   \   00000014   0xD507             BPL.N    ??halInternalSetMfgTokenData_0
   \   00000016   0x2282             MOVS     R2,#+130
   \   00000018   0x4651             MOV      R1,R10
   \   0000001A   0x.... 0x....      ADR.W    R0,?_0
   \   0000001E   0x.... 0x....      BL       __aeabi_assert
   \   00000022   0x.... 0x....      BL       __iar_EmptyStepPoint
    131            assert((len&1) != 1);
   \                     ??halInternalSetMfgTokenData_0: (+1)
   \   00000026   0x07E8             LSLS     R0,R5,#+31
   \   00000028   0xD507             BPL.N    ??halInternalSetMfgTokenData_1
   \   0000002A   0x2283             MOVS     R2,#+131
   \   0000002C   0x4651             MOV      R1,R10
   \   0000002E   0x.... 0x....      ADR.W    R0,?_2
   \   00000032   0x.... 0x....      BL       __aeabi_assert
   \   00000036   0x.... 0x....      BL       __iar_EmptyStepPoint
    132            assert((realAddress>=CIB_BOTTOM) && ((realAddress+len-1)<=CIB_TOP));
   \                     ??halInternalSetMfgTokenData_1: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable37_1  ;; 0x8040800
   \   0000003C   0x4286             CMP      R6,R0
   \   0000003E   0xD304             BCC.N    ??halInternalSetMfgTokenData_2
   \   00000040   0x19A8             ADDS     R0,R5,R6
   \   00000042   0x1E40             SUBS     R0,R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable37_2  ;; 0x8040a00
   \   00000046   0x4288             CMP      R0,R1
   \   00000048   0xD307             BCC.N    ??halInternalSetMfgTokenData_3
   \                     ??halInternalSetMfgTokenData_2: (+1)
   \   0000004A   0x2284             MOVS     R2,#+132
   \   0000004C   0x4651             MOV      R1,R10
   \   0000004E   0x.... 0x....      ADR.W    R0,?_3
   \   00000052   0x.... 0x....      BL       __aeabi_assert
   \   00000056   0x.... 0x....      BL       __iar_EmptyStepPoint
    133            
    134            /* CIB manufacturing tokens can only be written by on-chip code if the token
    135               is currently unprogrammed.  Verify the entire token is unwritten.  The
    136               flash library performs a similar check, but verifying here ensures that
    137               the entire token is unprogrammed and will prevent partial writes. */
    138            for(i=0;i<len;i++) 
   \                     ??halInternalSetMfgTokenData_3: (+1)
   \   0000005A   0x.... 0x....      ADR.W    R11,?_4
   \   0000005E   0x2700             MOVS     R7,#+0
   \   00000060   0xE00A             B.N      ??halInternalSetMfgTokenData_4
    139            {
    140              assert(flash[i] == 0xFF);
   \                     ??halInternalSetMfgTokenData_5: (+1)
   \   00000062   0x5DB8             LDRB     R0,[R7, R6]
   \   00000064   0x28FF             CMP      R0,#+255
   \   00000066   0xD006             BEQ.N    ??halInternalSetMfgTokenData_6
   \   00000068   0x228C             MOVS     R2,#+140
   \   0000006A   0x4651             MOV      R1,R10
   \   0000006C   0x4658             MOV      R0,R11
   \   0000006E   0x.... 0x....      BL       __aeabi_assert
   \   00000072   0x.... 0x....      BL       __iar_EmptyStepPoint
    141            }
   \                     ??halInternalSetMfgTokenData_6: (+1)
   \   00000076   0x1C7F             ADDS     R7,R7,#+1
   \                     ??halInternalSetMfgTokenData_4: (+1)
   \   00000078   0x42AF             CMP      R7,R5
   \   0000007A   0xD3F2             BCC.N    ??halInternalSetMfgTokenData_5
    142            
    143            /* Remember, the flash library operates in 16bit quantities, but the
    144               token system operates in 8bit quantities.  Hence the divide by 2. */
    145            flashStatus = halInternalFlashWrite(realAddress, data, (len/2));
    146            assert(flashStatus == ST_SUCCESS);
   \   0000007C   0x086A             LSRS     R2,R5,#+1
   \   0000007E   0x4621             MOV      R1,R4
   \   00000080   0x4630             MOV      R0,R6
   \   00000082   0x.... 0x....      BL       halInternalFlashWrite
   \   00000086   0xB138             CBZ.N    R0,??halInternalSetMfgTokenData_7
   \   00000088   0x2292             MOVS     R2,#+146
   \   0000008A   0x4651             MOV      R1,R10
   \   0000008C   0x.... 0x....      ADR.W    R0,?_5
   \   00000090   0x.... 0x....      BL       __aeabi_assert
   \   00000094   0x.... 0x....      BL       __iar_EmptyStepPoint
    147          }
   \                     ??halInternalSetMfgTokenData_7: (+1)
   \   00000098   0xE8BD 0x8CF1      POP      {R0,R4-R7,R10,R11,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   0x08040000         DC32     0x8040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_1:
   \   00000000   0x08040800         DC32     0x8040800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_2:
   \   00000000   0x08040A00         DC32     0x8040a00

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x28 0x74          DC8 "(token&1) != 1"
   \              0x6F 0x6B    
   \              0x65 0x6E    
   \              0x26 0x31    
   \              0x29 0x20    
   \              0x21 0x3D    
   \              0x20 0x31    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x4A          DC8 5CH, 4AH, 6FH, 6EH, 5CH, 44H, 6FH, 63H
   \              0x6F 0x6E    
   \              0x5C 0x44    
   \              0x6F 0x63    
   \   00000010   0x75 0x6D          DC8 75H, 6DH, 65H, 6EH, 74H, 73H, 5CH, 4DH
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x5C 0x4D    
   \   00000018   0x4F 0x5F          DC8 4FH, 5FH, 53H, 5FH, 61H, 6EH, 64H, 5FH
   \              0x53 0x5F    
   \              0x61 0x6E    
   \              0x64 0x5F    
   \   00000020   0x54 0x5C          DC8 54H, 5CH, 43H, 70H, 45H, 35H, 31H, 37H
   \              0x43 0x70    
   \              0x45 0x35    
   \              0x31 0x37    
   \   00000028   0x30 0x5F          DC8 30H, 5FH, 52H, 54H, 5FH, 53H, 79H, 73H
   \              0x52 0x54    
   \              0x5F 0x53    
   \              0x79 0x73    
   \   00000030   0x74 0x65          DC8 74H, 65H, 6DH, 73H, 5CH, 4CH, 61H, 62H
   \              0x6D 0x73    
   \              0x5C 0x4C    
   \              0x61 0x62    
   \   00000038   0x73 0x5C          DC8 73H, 5CH, 63H, 70H, 65H, 2DH, 35H, 31H
   \              0x63 0x70    
   \              0x65 0x2D    
   \              0x35 0x31    
   \   00000040   0x37 0x30          DC8 37H, 30H, 2DH, 6DH, 6FH, 74H, 65H, 2DH
   \              0x2D 0x6D    
   \              0x6F 0x74    
   \              0x65 0x2D    
   \   00000048   0x63 0x6F          DC8 63H, 6FH, 64H, 65H, 5CH, 55H, 74H, 69H
   \              0x64 0x65    
   \              0x5C 0x55    
   \              0x74 0x69    
   \   00000050   0x6C 0x69          DC8 6CH, 69H, 74H, 69H, 65H, 73H, 5CH, 53H
   \              0x74 0x69    
   \              0x65 0x73    
   \              0x5C 0x53    
   \   00000058   0x54 0x4D          DC8 54H, 4DH, 33H, 32H, 57H, 31H, 30H, 38H
   \              0x33 0x32    
   \              0x57 0x31    
   \              0x30 0x38    
   \   00000060   0x78 0x78          DC8 78H, 78H, 5FH, 48H, 41H, 4CH, 5FH, 44H
   \              0x5F 0x48    
   \              0x41 0x4C    
   \              0x5F 0x44    
   \   00000068   0x72 0x69          DC8 72H, 69H, 76H, 65H, 72H, 5CH, 6DH, 69H
   \              0x76 0x65    
   \              0x72 0x5C    
   \              0x6D 0x69    
   \   00000070   0x63 0x72          DC8 63H, 72H, 6FH, 5CH, 63H, 6FH, 72H, 74H
   \              0x6F 0x5C    
   \              0x63 0x6F    
   \              0x72 0x74    
   \   00000078   0x65 0x78          DC8 65H, 78H, 6DH, 33H, 5CH, 6DH, 66H, 67H
   \              0x6D 0x33    
   \              0x5C 0x6D    
   \              0x66 0x67    
   \   00000080   0x2D 0x74          DC8 2DH, 74H, 6FH, 6BH, 65H, 6EH, 2EH, 63H
   \              0x6F 0x6B    
   \              0x65 0x6E    
   \              0x2E 0x63    
   \   00000088   0x00               DC8 0
   \   00000089   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x28 0x6C          DC8 "(len&1) != 1"
   \              0x65 0x6E    
   \              0x26 0x31    
   \              0x29 0x20    
   \              0x21 0x3D    
   \              0x20 0x31    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x28 0x72          DC8 28H, 72H, 65H, 61H, 6CH, 41H, 64H, 64H
   \              0x65 0x61    
   \              0x6C 0x41    
   \              0x64 0x64    
   \   00000008   0x72 0x65          DC8 72H, 65H, 73H, 73H, 3EH, 3DH, 43H, 49H
   \              0x73 0x73    
   \              0x3E 0x3D    
   \              0x43 0x49    
   \   00000010   0x42 0x5F          DC8 42H, 5FH, 42H, 4FH, 54H, 54H, 4FH, 4DH
   \              0x42 0x4F    
   \              0x54 0x54    
   \              0x4F 0x4D    
   \   00000018   0x29 0x20          DC8 29H, 20H, 26H, 26H, 20H, 28H, 28H, 72H
   \              0x26 0x26    
   \              0x20 0x28    
   \              0x28 0x72    
   \   00000020   0x65 0x61          DC8 65H, 61H, 6CH, 41H, 64H, 64H, 72H, 65H
   \              0x6C 0x41    
   \              0x64 0x64    
   \              0x72 0x65    
   \   00000028   0x73 0x73          DC8 73H, 73H, 2BH, 6CH, 65H, 6EH, 2DH, 31H
   \              0x2B 0x6C    
   \              0x65 0x6E    
   \              0x2D 0x31    
   \   00000030   0x29 0x3C          DC8 29H, 3CH, 3DH, 43H, 49H, 42H, 5FH, 54H
   \              0x3D 0x43    
   \              0x49 0x42    
   \              0x5F 0x54    
   \   00000038   0x4F 0x50          DC8 4FH, 50H, 29H, 0
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x66 0x6C          DC8 "flash[i] == 0xFF"
   \              0x61 0x73    
   \              0x68 0x5B    
   \              0x69 0x5D    
   \              0x20 0x3D    
   \              0x3D 0x20    
   \              0x30 0x78    
   \              0x46 0x46    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x66 0x6C          DC8 "flashStatus == ST_SUCCESS"
   \              0x61 0x73    
   \              0x68 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x3D 0x3D    
   \              0x20 0x53    
   \              0x54 0x5F    
   \              0x53 0x55    
   \              0x43 0x43    
   \              0x45 0x53    
   \              0x53 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0
    148          
    149          /**
    150            * @}
    151            */
    152          
    153          /**
    154            * @}
    155            */ 
    156          
    157          /**
    158            * @}
    159            */
    160          
    161          
    162          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   halInternalGetMfgTokenData
        24   -> halCommonMemCompare
        24   -> halCommonMemCopy
        24   -> halInternalGetMfgTokenData
      32   halInternalSetMfgTokenData
        32   -> __aeabi_assert
        32   -> __iar_EmptyStepPoint
        32   -> halInternalFlashWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable37
       4  ??DataTable37_1
       4  ??DataTable37_2
      16  ?_0
     140  ?_1
      16  ?_2
      60  ?_3
      20  ?_4
      28  ?_5
       2  TOKEN_MFG_1V8_REG_VOLTAGE
       2  TOKEN_MFG_ANALOG_TRIM_BOOST
       2  TOKEN_MFG_ANALOG_TRIM_BOTH
       2  TOKEN_MFG_ANALOG_TRIM_NORMAL
       2  TOKEN_MFG_ASH_CONFIG
       2  TOKEN_MFG_BOARD_NAME
       2  TOKEN_MFG_BOOTLOAD_AES_KEY
       2  TOKEN_MFG_CBKE_DATA
       2  TOKEN_MFG_CHIP_DATA
       2  TOKEN_MFG_CIB_OBS
       2  TOKEN_MFG_CUSTOM_EUI_64
       2  TOKEN_MFG_CUSTOM_VERSION
       2  TOKEN_MFG_EUI_64
       2  TOKEN_MFG_EZSP_STORAGE
       2  TOKEN_MFG_FIB_CHECKSUM
       2  TOKEN_MFG_FIB_OBS
       2  TOKEN_MFG_FIB_VERSION
       2  TOKEN_MFG_INSTALLATION_CODE
       2  TOKEN_MFG_MANUF_ID
       2  TOKEN_MFG_OSC24M_BIAS_TRIM
       2  TOKEN_MFG_PART_DATA
       2  TOKEN_MFG_PHY_CONFIG
       2  TOKEN_MFG_REG_TRIM
       2  TOKEN_MFG_STRING
       2  TOKEN_MFG_ST_EUI_64
       2  TOKEN_MFG_SYNTH_FREQ_OFFSET
       2  TOKEN_MFG_TEMP_CAL
       2  TOKEN_MFG_TESTER_DATA
       2  TOKEN_MFG_VREF_VOLTAGE
      92  halInternalGetMfgTokenData
     156  halInternalSetMfgTokenData
       8  nullEui

 
  58 bytes in section .rodata
 548 bytes in section .text
 
 548 bytes of CODE  memory
  58 bytes of CONST memory

Errors: none
Warnings: none
